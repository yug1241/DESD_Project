
USART_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003d38  08003d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de8  08003de8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003df0  08003df0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df0  08003df0  00004df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df4  08003df4  00004df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003df8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cafc  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bbb  00000000  00000000  00011b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  000136f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000982  00000000  00000000  00014310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c6d  00000000  00000000  00014c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d6d9  00000000  00000000  000358ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad50  00000000  00000000  00042fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010dd28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003334  00000000  00000000  0010dd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001110a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d20 	.word	0x08003d20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d20 	.word	0x08003d20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <receive_choice>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void receive_choice(char str[])
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
     int i=0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
     char ch;
     do{
         HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004c4:	f107 010b 	add.w	r1, r7, #11
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004cc:	2201      	movs	r2, #1
 80004ce:	480f      	ldr	r0, [pc, #60]	@ (800050c <receive_choice+0x54>)
 80004d0:	f002 fc3d 	bl	8002d4e <HAL_UART_Receive>
         str[i++]=ch;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	60fa      	str	r2, [r7, #12]
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4413      	add	r3, r2
 80004e0:	7afa      	ldrb	r2, [r7, #11]
 80004e2:	701a      	strb	r2, [r3, #0]
     }while(ch!='\r');
 80004e4:	7afb      	ldrb	r3, [r7, #11]
 80004e6:	2b0d      	cmp	r3, #13
 80004e8:	d1ec      	bne.n	80004c4 <receive_choice+0xc>
        str[i++]='\n';
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	60fa      	str	r2, [r7, #12]
 80004f0:	461a      	mov	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	220a      	movs	r2, #10
 80004f8:	701a      	strb	r2, [r3, #0]
        str[i]='\0';
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4413      	add	r3, r2
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000070 	.word	0x20000070

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char str[20];
	    uint32_t choice;
	    int value = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	64bb      	str	r3, [r7, #72]	@ 0x48
	    char str1[20];
	    char str2[20];
	    int number;
	    int mask = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	647b      	str	r3, [r7, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fbb5 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f8b9 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f9eb 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f9bf 	bl	80008ac <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800052e:	f000 f91d 	bl	800076c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  int i=0;
 8000532:	2300      	movs	r3, #0
 8000534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800053c:	484b      	ldr	r0, [pc, #300]	@ (800066c <main+0x15c>)
 800053e:	f000 ff7b 	bl	8001438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000548:	4848      	ldr	r0, [pc, #288]	@ (800066c <main+0x15c>)
 800054a:	f000 ff75 	bl	8001438 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800054e:	2100      	movs	r1, #0
 8000550:	4847      	ldr	r0, [pc, #284]	@ (8000670 <main+0x160>)
 8000552:	f001 fce5 	bl	8001f20 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  do{
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"Name = Pavan Pandharinath Karpe\r\n", sizeof("Name = Pavan Pandharinath Karpe\r\n"), HAL_MAX_DELAY);
 8000556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800055a:	2222      	movs	r2, #34	@ 0x22
 800055c:	4945      	ldr	r1, [pc, #276]	@ (8000674 <main+0x164>)
 800055e:	4846      	ldr	r0, [pc, #280]	@ (8000678 <main+0x168>)
 8000560:	f002 fb6a 	bl	8002c38 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"ROLL NO: 80807\r\n", sizeof("ROLL NO: 80807\r\n"), HAL_MAX_DELAY);
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000568:	2211      	movs	r2, #17
 800056a:	4944      	ldr	r1, [pc, #272]	@ (800067c <main+0x16c>)
 800056c:	4842      	ldr	r0, [pc, #264]	@ (8000678 <main+0x168>)
 800056e:	f002 fb63 	bl	8002c38 <HAL_UART_Transmit>

	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"list of cases\r\n", sizeof("list of cases\r\n"), HAL_MAX_DELAY);
 8000572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000576:	2210      	movs	r2, #16
 8000578:	4941      	ldr	r1, [pc, #260]	@ (8000680 <main+0x170>)
 800057a:	483f      	ldr	r0, [pc, #252]	@ (8000678 <main+0x168>)
 800057c:	f002 fb5c 	bl	8002c38 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"1. LED Pattern\r\n", sizeof("1. LED Pattern\r\n"), HAL_MAX_DELAY);
 8000580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000584:	2211      	movs	r2, #17
 8000586:	493f      	ldr	r1, [pc, #252]	@ (8000684 <main+0x174>)
 8000588:	483b      	ldr	r0, [pc, #236]	@ (8000678 <main+0x168>)
 800058a:	f002 fb55 	bl	8002c38 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"2. Parity Check\r\n", sizeof("2. Parity Check\r\n"), HAL_MAX_DELAY);
 800058e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000592:	2212      	movs	r2, #18
 8000594:	493c      	ldr	r1, [pc, #240]	@ (8000688 <main+0x178>)
 8000596:	4838      	ldr	r0, [pc, #224]	@ (8000678 <main+0x168>)
 8000598:	f002 fb4e 	bl	8002c38 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"3. ADC Reading\r\n", sizeof("3. ADC Reading\r\n"), HAL_MAX_DELAY);
 800059c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005a0:	2211      	movs	r2, #17
 80005a2:	493a      	ldr	r1, [pc, #232]	@ (800068c <main+0x17c>)
 80005a4:	4834      	ldr	r0, [pc, #208]	@ (8000678 <main+0x168>)
 80005a6:	f002 fb47 	bl	8002c38 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"Enter your choice\r\n", sizeof("Enter your choice\r\n"), HAL_MAX_DELAY);
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ae:	2214      	movs	r2, #20
 80005b0:	4937      	ldr	r1, [pc, #220]	@ (8000690 <main+0x180>)
 80005b2:	4831      	ldr	r0, [pc, #196]	@ (8000678 <main+0x168>)
 80005b4:	f002 fb40 	bl	8002c38 <HAL_UART_Transmit>

	  	  receive_choice(str);
 80005b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff7b 	bl	80004b8 <receive_choice>
	  	  choice = str[0]-'0';
 80005c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80005c6:	3b30      	subs	r3, #48	@ 0x30
 80005c8:	643b      	str	r3, [r7, #64]	@ 0x40

	  	 switch(choice)
 80005ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d035      	beq.n	800063c <main+0x12c>
 80005d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d8bf      	bhi.n	8000556 <main+0x46>
 80005d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d003      	beq.n	80005e4 <main+0xd4>
 80005dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d016      	beq.n	8000610 <main+0x100>
 80005e2:	e041      	b.n	8000668 <main+0x158>
	  		  {
	  		  case 1:
	  			while (1)
	  			  {
	  				for(i=20; i<=60;i++)
 80005e4:	2314      	movs	r3, #20
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80005e8:	e00e      	b.n	8000608 <main+0xf8>
	  				  {
	  					htim8.Instance->CCR1 = i;
 80005ea:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <main+0x160>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80005f0:	635a      	str	r2, [r3, #52]	@ 0x34
	  					HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	@ 0x64
 80005f4:	f000 fbbc 	bl	8000d70 <HAL_Delay>
	  					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fc:	4825      	ldr	r0, [pc, #148]	@ (8000694 <main+0x184>)
 80005fe:	f000 ff34 	bl	800146a <HAL_GPIO_TogglePin>
	  				for(i=20; i<=60;i++)
 8000602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000604:	3301      	adds	r3, #1
 8000606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800060a:	2b3c      	cmp	r3, #60	@ 0x3c
 800060c:	dded      	ble.n	80005ea <main+0xda>
 800060e:	e7e9      	b.n	80005e4 <main+0xd4>
	  			  break;

	  		  case 2:
	  			while (1)
	  				{
	  	  				for(i=60; i<=100;i++)
 8000610:	233c      	movs	r3, #60	@ 0x3c
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000614:	e00e      	b.n	8000634 <main+0x124>
	  	  				{
	  						htim8.Instance->CCR1 = i;
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <main+0x160>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
		  					HAL_Delay(100);
 800061e:	2064      	movs	r0, #100	@ 0x64
 8000620:	f000 fba6 	bl	8000d70 <HAL_Delay>
	  				  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000624:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000628:	481a      	ldr	r0, [pc, #104]	@ (8000694 <main+0x184>)
 800062a:	f000 ff1e 	bl	800146a <HAL_GPIO_TogglePin>
	  	  				for(i=60; i<=100;i++)
 800062e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000630:	3301      	adds	r3, #1
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000636:	2b64      	cmp	r3, #100	@ 0x64
 8000638:	dded      	ble.n	8000616 <main+0x106>
 800063a:	e7e9      	b.n	8000610 <main+0x100>
	  					break;

	  		  case 3:
	  			while (1)
	  				{
	  	  				for(i=100; i<=20;i++)
 800063c:	2364      	movs	r3, #100	@ 0x64
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000640:	e00e      	b.n	8000660 <main+0x150>
	  	  				{
	  						htim8.Instance->CCR1 = i;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <main+0x160>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
	 	 					HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	@ 0x64
 800064c:	f000 fb90 	bl	8000d70 <HAL_Delay>
							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000650:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000654:	480f      	ldr	r0, [pc, #60]	@ (8000694 <main+0x184>)
 8000656:	f000 ff08 	bl	800146a <HAL_GPIO_TogglePin>
	  	  				for(i=100; i<=20;i++)
 800065a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800065c:	3301      	adds	r3, #1
 800065e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000662:	2b14      	cmp	r3, #20
 8000664:	dded      	ble.n	8000642 <main+0x132>
 8000666:	e7e9      	b.n	800063c <main+0x12c>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)"Name = Pavan Pandharinath Karpe\r\n", sizeof("Name = Pavan Pandharinath Karpe\r\n"), HAL_MAX_DELAY);
 8000668:	e775      	b.n	8000556 <main+0x46>
 800066a:	bf00      	nop
 800066c:	40020800 	.word	0x40020800
 8000670:	20000028 	.word	0x20000028
 8000674:	08003d38 	.word	0x08003d38
 8000678:	20000070 	.word	0x20000070
 800067c:	08003d5c 	.word	0x08003d5c
 8000680:	08003d70 	.word	0x08003d70
 8000684:	08003d80 	.word	0x08003d80
 8000688:	08003d94 	.word	0x08003d94
 800068c:	08003da8 	.word	0x08003da8
 8000690:	08003dbc 	.word	0x08003dbc
 8000694:	40020c00 	.word	0x40020c00

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fb0e 	bl	8003cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800070c:	2332      	movs	r3, #50	@ 0x32
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000710:	2304      	movs	r3, #4
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 febf 	bl	80014a0 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f960 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f920 	bl	8001990 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f949 	bl	80009ec <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	@ 0x58
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2220      	movs	r2, #32
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fa8f 	bl	8003cc8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007aa:	4b3e      	ldr	r3, [pc, #248]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007ac:	4a3e      	ldr	r2, [pc, #248]	@ (80008a8 <MX_TIM8_Init+0x13c>)
 80007ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 80007b0:	4b3c      	ldr	r3, [pc, #240]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007b2:	2247      	movs	r2, #71	@ 0x47
 80007b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b3b      	ldr	r3, [pc, #236]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80007bc:	4b39      	ldr	r3, [pc, #228]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007be:	2263      	movs	r2, #99	@ 0x63
 80007c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b38      	ldr	r3, [pc, #224]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007c8:	4b36      	ldr	r3, [pc, #216]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ce:	4b35      	ldr	r3, [pc, #212]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80007d4:	4833      	ldr	r0, [pc, #204]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007d6:	f001 fafb 	bl	8001dd0 <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80007e0:	f000 f904 	bl	80009ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80007ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007ee:	4619      	mov	r1, r3
 80007f0:	482c      	ldr	r0, [pc, #176]	@ (80008a4 <MX_TIM8_Init+0x138>)
 80007f2:	f001 fd1f 	bl	8002234 <HAL_TIM_ConfigClockSource>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80007fc:	f000 f8f6 	bl	80009ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000800:	4828      	ldr	r0, [pc, #160]	@ (80008a4 <MX_TIM8_Init+0x138>)
 8000802:	f001 fb34 	bl	8001e6e <HAL_TIM_PWM_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800080c:	f000 f8ee 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000818:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800081c:	4619      	mov	r1, r3
 800081e:	4821      	ldr	r0, [pc, #132]	@ (80008a4 <MX_TIM8_Init+0x138>)
 8000820:	f002 f8ec 	bl	80029fc <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800082a:	f000 f8df 	bl	80009ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	@ 0x60
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <MX_TIM8_Init+0x138>)
 8000854:	f001 fc2c 	bl	80020b0 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800085e:	f000 f8c5 	bl	80009ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <MX_TIM8_Init+0x138>)
 8000886:	f002 f935 	bl	8002af4 <HAL_TIMEx_ConfigBreakDeadTime>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000890:	f000 f8ac 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000894:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <MX_TIM8_Init+0x138>)
 8000896:	f000 f8f9 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 800089a:	bf00      	nop
 800089c:	3758      	adds	r7, #88	@ 0x58
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000028 	.word	0x20000028
 80008a8:	40010400 	.word	0x40010400

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <MX_USART2_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f002 f958 	bl	8002b98 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f87d 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000070 	.word	0x20000070
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b31      	ldr	r3, [pc, #196]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a30      	ldr	r2, [pc, #192]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b2e      	ldr	r3, [pc, #184]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b2a      	ldr	r3, [pc, #168]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a29      	ldr	r2, [pc, #164]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a22      	ldr	r2, [pc, #136]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <MX_GPIO_Init+0xe0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000970:	481c      	ldr	r0, [pc, #112]	@ (80009e4 <MX_GPIO_Init+0xe4>)
 8000972:	f000 fd61 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800097c:	481a      	ldr	r0, [pc, #104]	@ (80009e8 <MX_GPIO_Init+0xe8>)
 800097e:	f000 fd5b 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000982:	2302      	movs	r3, #2
 8000984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800098a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <MX_GPIO_Init+0xe8>)
 8000998:	f000 fbb2 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800099c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <MX_GPIO_Init+0xe4>)
 80009b6:	f000 fba3 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_GPIO_Init+0xe8>)
 80009d4:	f000 fb94 	bl	8001100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	40020800 	.word	0x40020800

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fa8e 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0b      	ldr	r2, [pc, #44]	@ (8000a84 <HAL_TIM_Base_MspInit+0x3c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d10d      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_TIM_Base_MspInit+0x40>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <HAL_TIM_Base_MspInit+0x40>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6a:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <HAL_TIM_Base_MspInit+0x40>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40010400 	.word	0x40010400
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <HAL_TIM_MspPostInit+0x68>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d11d      	bne.n	8000aea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_TIM_MspPostInit+0x6c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <HAL_TIM_MspPostInit+0x6c>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_TIM_MspPostInit+0x6c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aca:	2340      	movs	r3, #64	@ 0x40
 8000acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ada:	2303      	movs	r3, #3
 8000adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <HAL_TIM_MspPostInit+0x70>)
 8000ae6:	f000 fb0b 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40010400 	.word	0x40010400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020800 	.word	0x40020800

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <HAL_UART_MspInit+0x94>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d133      	bne.n	8000b8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_UART_MspInit+0x98>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <HAL_UART_MspInit+0x98>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_UART_MspInit+0x98>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_UART_MspInit+0x98>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <HAL_UART_MspInit+0x98>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_UART_MspInit+0x98>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <HAL_UART_MspInit+0x9c>)
 8000b76:	f000 fac3 	bl	8001100 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2026      	movs	r0, #38	@ 0x26
 8000b80:	f000 f9f5 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b84:	2026      	movs	r0, #38	@ 0x26
 8000b86:	f000 fa0e 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	@ 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40004400 	.word	0x40004400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f89b 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <USART2_IRQHandler+0x10>)
 8000c06:	f002 f939 	bl	8002e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000070 	.word	0x20000070

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	@ (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	@ (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f003 f837 	bl	8003cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc51 	bl	8000510 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c7c:	08003df8 	.word	0x08003df8
  ldr r2, =_sbss
 8000c80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c84:	200000bc 	.word	0x200000bc

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f94f 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe9a 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f967 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 f92f 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	200000b8 	.word	0x200000b8

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200000b8 	.word	0x200000b8

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	@ (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	@ (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	@ (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	@ 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff feb6 	bl	8000d58 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d008      	beq.n	800100c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2280      	movs	r2, #128	@ 0x80
 8000ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e052      	b.n	80010b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0216 	bic.w	r2, r2, #22
 800101a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800102a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	2b00      	cmp	r3, #0
 8001032:	d103      	bne.n	800103c <HAL_DMA_Abort+0x62>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001038:	2b00      	cmp	r3, #0
 800103a:	d007      	beq.n	800104c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0208 	bic.w	r2, r2, #8
 800104a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800105c:	e013      	b.n	8001086 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800105e:	f7ff fe7b 	bl	8000d58 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b05      	cmp	r3, #5
 800106a:	d90c      	bls.n	8001086 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2220      	movs	r2, #32
 8001070:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2203      	movs	r2, #3
 8001076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e015      	b.n	80010b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e4      	bne.n	800105e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001098:	223f      	movs	r2, #63	@ 0x3f
 800109a:	409a      	lsls	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d004      	beq.n	80010d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2280      	movs	r2, #128	@ 0x80
 80010d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e00c      	b.n	80010f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2205      	movs	r2, #5
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e16b      	b.n	80013f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 815a 	bne.w	80013ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	2b02      	cmp	r3, #2
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d017      	beq.n	80011f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80b4 	beq.w	80013ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b60      	ldr	r3, [pc, #384]	@ (800140c <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	4a5f      	ldr	r2, [pc, #380]	@ (800140c <HAL_GPIO_Init+0x30c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001294:	6453      	str	r3, [r2, #68]	@ 0x44
 8001296:	4b5d      	ldr	r3, [pc, #372]	@ (800140c <HAL_GPIO_Init+0x30c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001410 <HAL_GPIO_Init+0x310>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	@ (8001414 <HAL_GPIO_Init+0x314>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a51      	ldr	r2, [pc, #324]	@ (8001418 <HAL_GPIO_Init+0x318>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a50      	ldr	r2, [pc, #320]	@ (800141c <HAL_GPIO_Init+0x31c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001420 <HAL_GPIO_Init+0x320>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x21a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001424 <HAL_GPIO_Init+0x324>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x216>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001428 <HAL_GPIO_Init+0x328>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x212>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	@ (800142c <HAL_GPIO_Init+0x32c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x20e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	@ (8001430 <HAL_GPIO_Init+0x330>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x20a>
 8001306:	2307      	movs	r3, #7
 8001308:	e00e      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130a:	2308      	movs	r3, #8
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130e:	2306      	movs	r3, #6
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	@ (8001410 <HAL_GPIO_Init+0x310>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b3b      	ldr	r3, [pc, #236]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136a:	4a32      	ldr	r2, [pc, #200]	@ (8001434 <HAL_GPIO_Init+0x334>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001370:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001394:	4a27      	ldr	r2, [pc, #156]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139a:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <HAL_GPIO_Init+0x334>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013be:	4a1d      	ldr	r2, [pc, #116]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae90 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40013c00 	.word	0x40013c00

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147c:	887a      	ldrh	r2, [r7, #2]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	041a      	lsls	r2, r3, #16
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43d9      	mvns	r1, r3
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	400b      	ands	r3, r1
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e267      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d075      	beq.n	80015aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014be:	4b88      	ldr	r3, [pc, #544]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d00c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b85      	ldr	r3, [pc, #532]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d112      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d6:	4b82      	ldr	r3, [pc, #520]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014e2:	d10b      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4b7e      	ldr	r3, [pc, #504]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d05b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x108>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d157      	bne.n	80015a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e242      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x74>
 8001506:	4b76      	ldr	r3, [pc, #472]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a75      	ldr	r2, [pc, #468]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b70      	ldr	r3, [pc, #448]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6f      	ldr	r2, [pc, #444]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b6d      	ldr	r3, [pc, #436]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6c      	ldr	r2, [pc, #432]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001538:	4b69      	ldr	r3, [pc, #420]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a68      	ldr	r2, [pc, #416]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a65      	ldr	r2, [pc, #404]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fbfe 	bl	8000d58 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fbfa 	bl	8000d58 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e207      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b5b      	ldr	r3, [pc, #364]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xc0>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fbea 	bl	8000d58 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fbe6 	bl	8000d58 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1f3      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	4b51      	ldr	r3, [pc, #324]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0xe8>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d063      	beq.n	800167e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b6:	4b4a      	ldr	r3, [pc, #296]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b47      	ldr	r3, [pc, #284]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b44      	ldr	r3, [pc, #272]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1c7      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4937      	ldr	r1, [pc, #220]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	e03a      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001610:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fb9f 	bl	8000d58 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fb9b 	bl	8000d58 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1a8      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4925      	ldr	r1, [pc, #148]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb7e 	bl	8000d58 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fb7a 	bl	8000d58 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e187      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d036      	beq.n	80016f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d016      	beq.n	80016c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_RCC_OscConfig+0x248>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fb5e 	bl	8000d58 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fb5a 	bl	8000d58 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e167      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80016b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x200>
 80016be:	e01b      	b.n	80016f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_RCC_OscConfig+0x248>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb47 	bl	8000d58 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	e00e      	b.n	80016ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb43 	bl	8000d58 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d907      	bls.n	80016ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e150      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	42470000 	.word	0x42470000
 80016e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	4b88      	ldr	r3, [pc, #544]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ea      	bne.n	80016ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8097 	beq.w	8001834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170a:	4b81      	ldr	r3, [pc, #516]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10f      	bne.n	8001736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a7c      	ldr	r2, [pc, #496]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b7a      	ldr	r3, [pc, #488]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001732:	2301      	movs	r3, #1
 8001734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b77      	ldr	r3, [pc, #476]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4b74      	ldr	r3, [pc, #464]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a73      	ldr	r2, [pc, #460]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7ff fb03 	bl	8000d58 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001756:	f7ff faff 	bl	8000d58 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e10c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x2ea>
 800177c:	4b64      	ldr	r3, [pc, #400]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	4a63      	ldr	r2, [pc, #396]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	@ 0x70
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x30c>
 8001792:	4b5f      	ldr	r3, [pc, #380]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001796:	4a5e      	ldr	r2, [pc, #376]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6713      	str	r3, [r2, #112]	@ 0x70
 800179e:	4b5c      	ldr	r3, [pc, #368]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 80017ac:	4b58      	ldr	r3, [pc, #352]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b0:	4a57      	ldr	r2, [pc, #348]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b8:	4b55      	ldr	r3, [pc, #340]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	4a54      	ldr	r2, [pc, #336]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d015      	beq.n	80017f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fac4 	bl	8000d58 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fac0 	bl	8000d58 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0cb      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ee      	beq.n	80017d4 <HAL_RCC_OscConfig+0x334>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff faae 	bl	8000d58 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff faaa 	bl	8000d58 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0b5      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001816:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ee      	bne.n	8001800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	4a38      	ldr	r2, [pc, #224]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a1 	beq.w	8001980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d05c      	beq.n	8001904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d141      	bne.n	80018d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fa7e 	bl	8000d58 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fa7a 	bl	8000d58 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e087      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	3b01      	subs	r3, #1
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	491b      	ldr	r1, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fa53 	bl	8000d58 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fa4f 	bl	8000d58 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e05c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x416>
 80018d4:	e054      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fa3c 	bl	8000d58 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fa38 	bl	8000d58 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e045      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x444>
 8001902:	e03d      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e038      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000
 8001918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x4ec>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d028      	beq.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d121      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001954:	4293      	cmp	r3, r2
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0cc      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d90c      	bls.n	80019cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b65      	ldr	r3, [pc, #404]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b63      	ldr	r3, [pc, #396]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0b8      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	4b59      	ldr	r3, [pc, #356]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a58      	ldr	r2, [pc, #352]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019fc:	4b53      	ldr	r3, [pc, #332]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a52      	ldr	r2, [pc, #328]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b50      	ldr	r3, [pc, #320]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	494d      	ldr	r1, [pc, #308]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d044      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e067      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4934      	ldr	r1, [pc, #208]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f96a 	bl	8000d58 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f966 	bl	8000d58 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e04f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b25      	ldr	r3, [pc, #148]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d20c      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e032      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4916      	ldr	r1, [pc, #88]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490e      	ldr	r1, [pc, #56]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b16:	f000 f821 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	490a      	ldr	r1, [pc, #40]	@ (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	4a09      	ldr	r2, [pc, #36]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f8ca 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08003dd0 	.word	0x08003dd0
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b60:	b094      	sub	sp, #80	@ 0x50
 8001b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b68:	2300      	movs	r3, #0
 8001b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b74:	4b79      	ldr	r3, [pc, #484]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d00d      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x40>
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	f200 80e1 	bhi.w	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8e:	e0db      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b73      	ldr	r3, [pc, #460]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b92:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b94:	e0db      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b96:	4b73      	ldr	r3, [pc, #460]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b9a:	e0d8      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ba4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4621      	mov	r1, r4
 8001be8:	1a51      	subs	r1, r2, r1
 8001bea:	6139      	str	r1, [r7, #16]
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c00:	4659      	mov	r1, fp
 8001c02:	018b      	lsls	r3, r1, #6
 8001c04:	4651      	mov	r1, sl
 8001c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0a:	4651      	mov	r1, sl
 8001c0c:	018a      	lsls	r2, r1, #6
 8001c0e:	4651      	mov	r1, sl
 8001c10:	ebb2 0801 	subs.w	r8, r2, r1
 8001c14:	4659      	mov	r1, fp
 8001c16:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	eb18 0303 	adds.w	r3, r8, r3
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	462b      	mov	r3, r5
 8001c3c:	eb49 0303 	adc.w	r3, r9, r3
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c4e:	4629      	mov	r1, r5
 8001c50:	024b      	lsls	r3, r1, #9
 8001c52:	4621      	mov	r1, r4
 8001c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c58:	4621      	mov	r1, r4
 8001c5a:	024a      	lsls	r2, r1, #9
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c62:	2200      	movs	r2, #0
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c6c:	f7fe faac 	bl	80001c8 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4613      	mov	r3, r2
 8001c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c78:	e058      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	2200      	movs	r2, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	4611      	mov	r1, r2
 8001c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c94:	4642      	mov	r2, r8
 8001c96:	464b      	mov	r3, r9
 8001c98:	f04f 0000 	mov.w	r0, #0
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	0159      	lsls	r1, r3, #5
 8001ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca6:	0150      	lsls	r0, r2, #5
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4641      	mov	r1, r8
 8001cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	00eb      	lsls	r3, r5, #3
 8001cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	18e3      	adds	r3, r4, r3
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	464b      	mov	r3, r9
 8001cf0:	eb45 0303 	adc.w	r3, r5, r3
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d16:	2200      	movs	r2, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	61fa      	str	r2, [r7, #28]
 8001d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d20:	f7fe fa52 	bl	80001c8 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3750      	adds	r7, #80	@ 0x50
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d84:	f7ff fff0 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4903      	ldr	r1, [pc, #12]	@ (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	08003de0 	.word	0x08003de0

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dac:	f7ff ffdc 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0b5b      	lsrs	r3, r3, #13
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4903      	ldr	r1, [pc, #12]	@ (8001dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08003de0 	.word	0x08003de0

08001dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e041      	b.n	8001e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fe26 	bl	8000a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f000 fad8 	bl	80023c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e041      	b.n	8001f04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f839 	bl	8001f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f000 fa89 	bl	80023c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_TIM_PWM_Start+0x24>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e022      	b.n	8001f8a <HAL_TIM_PWM_Start+0x6a>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d109      	bne.n	8001f5e <HAL_TIM_PWM_Start+0x3e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	e015      	b.n	8001f8a <HAL_TIM_PWM_Start+0x6a>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d109      	bne.n	8001f78 <HAL_TIM_PWM_Start+0x58>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	e008      	b.n	8001f8a <HAL_TIM_PWM_Start+0x6a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07c      	b.n	800208c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d104      	bne.n	8001fa2 <HAL_TIM_PWM_Start+0x82>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fa0:	e013      	b.n	8001fca <HAL_TIM_PWM_Start+0xaa>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d104      	bne.n	8001fb2 <HAL_TIM_PWM_Start+0x92>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fb0:	e00b      	b.n	8001fca <HAL_TIM_PWM_Start+0xaa>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d104      	bne.n	8001fc2 <HAL_TIM_PWM_Start+0xa2>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fc0:	e003      	b.n	8001fca <HAL_TIM_PWM_Start+0xaa>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	6839      	ldr	r1, [r7, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fcec 	bl	80029b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8002094 <HAL_TIM_PWM_Start+0x174>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_TIM_PWM_Start+0xcc>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8002098 <HAL_TIM_PWM_Start+0x178>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_TIM_PWM_Start+0xd0>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_TIM_PWM_Start+0xd2>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_TIM_PWM_Start+0x174>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d022      	beq.n	8002056 <HAL_TIM_PWM_Start+0x136>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002018:	d01d      	beq.n	8002056 <HAL_TIM_PWM_Start+0x136>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <HAL_TIM_PWM_Start+0x17c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d018      	beq.n	8002056 <HAL_TIM_PWM_Start+0x136>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <HAL_TIM_PWM_Start+0x180>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_TIM_PWM_Start+0x136>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <HAL_TIM_PWM_Start+0x184>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00e      	beq.n	8002056 <HAL_TIM_PWM_Start+0x136>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a16      	ldr	r2, [pc, #88]	@ (8002098 <HAL_TIM_PWM_Start+0x178>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d009      	beq.n	8002056 <HAL_TIM_PWM_Start+0x136>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a18      	ldr	r2, [pc, #96]	@ (80020a8 <HAL_TIM_PWM_Start+0x188>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d004      	beq.n	8002056 <HAL_TIM_PWM_Start+0x136>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_TIM_PWM_Start+0x18c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d111      	bne.n	800207a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d010      	beq.n	800208a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002078:	e007      	b.n	800208a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40010000 	.word	0x40010000
 8002098:	40010400 	.word	0x40010400
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40000c00 	.word	0x40000c00
 80020a8:	40014000 	.word	0x40014000
 80020ac:	40001800 	.word	0x40001800

080020b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e0ae      	b.n	800222c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	f200 809f 	bhi.w	800221c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020de:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	08002119 	.word	0x08002119
 80020e8:	0800221d 	.word	0x0800221d
 80020ec:	0800221d 	.word	0x0800221d
 80020f0:	0800221d 	.word	0x0800221d
 80020f4:	08002159 	.word	0x08002159
 80020f8:	0800221d 	.word	0x0800221d
 80020fc:	0800221d 	.word	0x0800221d
 8002100:	0800221d 	.word	0x0800221d
 8002104:	0800219b 	.word	0x0800219b
 8002108:	0800221d 	.word	0x0800221d
 800210c:	0800221d 	.word	0x0800221d
 8002110:	0800221d 	.word	0x0800221d
 8002114:	080021db 	.word	0x080021db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f9fc 	bl	800251c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0208 	orr.w	r2, r2, #8
 8002132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6999      	ldr	r1, [r3, #24]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	619a      	str	r2, [r3, #24]
      break;
 8002156:	e064      	b.n	8002222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fa4c 	bl	80025fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6999      	ldr	r1, [r3, #24]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	021a      	lsls	r2, r3, #8
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	619a      	str	r2, [r3, #24]
      break;
 8002198:	e043      	b.n	8002222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 faa1 	bl	80026e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0208 	orr.w	r2, r2, #8
 80021b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0204 	bic.w	r2, r2, #4
 80021c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69d9      	ldr	r1, [r3, #28]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	61da      	str	r2, [r3, #28]
      break;
 80021d8:	e023      	b.n	8002222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 faf5 	bl	80027d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69d9      	ldr	r1, [r3, #28]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	021a      	lsls	r2, r3, #8
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	61da      	str	r2, [r3, #28]
      break;
 800221a:	e002      	b.n	8002222 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	75fb      	strb	r3, [r7, #23]
      break;
 8002220:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800222a:	7dfb      	ldrb	r3, [r7, #23]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_TIM_ConfigClockSource+0x1c>
 800224c:	2302      	movs	r3, #2
 800224e:	e0b4      	b.n	80023ba <HAL_TIM_ConfigClockSource+0x186>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800226e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002288:	d03e      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0xd4>
 800228a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800228e:	f200 8087 	bhi.w	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002296:	f000 8086 	beq.w	80023a6 <HAL_TIM_ConfigClockSource+0x172>
 800229a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800229e:	d87f      	bhi.n	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
 80022a0:	2b70      	cmp	r3, #112	@ 0x70
 80022a2:	d01a      	beq.n	80022da <HAL_TIM_ConfigClockSource+0xa6>
 80022a4:	2b70      	cmp	r3, #112	@ 0x70
 80022a6:	d87b      	bhi.n	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
 80022a8:	2b60      	cmp	r3, #96	@ 0x60
 80022aa:	d050      	beq.n	800234e <HAL_TIM_ConfigClockSource+0x11a>
 80022ac:	2b60      	cmp	r3, #96	@ 0x60
 80022ae:	d877      	bhi.n	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
 80022b0:	2b50      	cmp	r3, #80	@ 0x50
 80022b2:	d03c      	beq.n	800232e <HAL_TIM_ConfigClockSource+0xfa>
 80022b4:	2b50      	cmp	r3, #80	@ 0x50
 80022b6:	d873      	bhi.n	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
 80022b8:	2b40      	cmp	r3, #64	@ 0x40
 80022ba:	d058      	beq.n	800236e <HAL_TIM_ConfigClockSource+0x13a>
 80022bc:	2b40      	cmp	r3, #64	@ 0x40
 80022be:	d86f      	bhi.n	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c0:	2b30      	cmp	r3, #48	@ 0x30
 80022c2:	d064      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x15a>
 80022c4:	2b30      	cmp	r3, #48	@ 0x30
 80022c6:	d86b      	bhi.n	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d060      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x15a>
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d867      	bhi.n	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d05c      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x15a>
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	d05a      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x15a>
 80022d8:	e062      	b.n	80023a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022ea:	f000 fb41 	bl	8002970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80022fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	609a      	str	r2, [r3, #8]
      break;
 8002306:	e04f      	b.n	80023a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002318:	f000 fb2a 	bl	8002970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800232a:	609a      	str	r2, [r3, #8]
      break;
 800232c:	e03c      	b.n	80023a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800233a:	461a      	mov	r2, r3
 800233c:	f000 fa9e 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2150      	movs	r1, #80	@ 0x50
 8002346:	4618      	mov	r0, r3
 8002348:	f000 faf7 	bl	800293a <TIM_ITRx_SetConfig>
      break;
 800234c:	e02c      	b.n	80023a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800235a:	461a      	mov	r2, r3
 800235c:	f000 fabd 	bl	80028da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2160      	movs	r1, #96	@ 0x60
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fae7 	bl	800293a <TIM_ITRx_SetConfig>
      break;
 800236c:	e01c      	b.n	80023a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	461a      	mov	r2, r3
 800237c:	f000 fa7e 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2140      	movs	r1, #64	@ 0x40
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fad7 	bl	800293a <TIM_ITRx_SetConfig>
      break;
 800238c:	e00c      	b.n	80023a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f000 face 	bl	800293a <TIM_ITRx_SetConfig>
      break;
 800239e:	e003      	b.n	80023a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	e000      	b.n	80023a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a46      	ldr	r2, [pc, #280]	@ (80024f0 <TIM_Base_SetConfig+0x12c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <TIM_Base_SetConfig+0x40>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e2:	d00f      	beq.n	8002404 <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a43      	ldr	r2, [pc, #268]	@ (80024f4 <TIM_Base_SetConfig+0x130>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00b      	beq.n	8002404 <TIM_Base_SetConfig+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a42      	ldr	r2, [pc, #264]	@ (80024f8 <TIM_Base_SetConfig+0x134>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <TIM_Base_SetConfig+0x40>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a41      	ldr	r2, [pc, #260]	@ (80024fc <TIM_Base_SetConfig+0x138>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d003      	beq.n	8002404 <TIM_Base_SetConfig+0x40>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a40      	ldr	r2, [pc, #256]	@ (8002500 <TIM_Base_SetConfig+0x13c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d108      	bne.n	8002416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800240a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a35      	ldr	r2, [pc, #212]	@ (80024f0 <TIM_Base_SetConfig+0x12c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d02b      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002424:	d027      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a32      	ldr	r2, [pc, #200]	@ (80024f4 <TIM_Base_SetConfig+0x130>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d023      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a31      	ldr	r2, [pc, #196]	@ (80024f8 <TIM_Base_SetConfig+0x134>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01f      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a30      	ldr	r2, [pc, #192]	@ (80024fc <TIM_Base_SetConfig+0x138>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01b      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a2f      	ldr	r2, [pc, #188]	@ (8002500 <TIM_Base_SetConfig+0x13c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d017      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a2e      	ldr	r2, [pc, #184]	@ (8002504 <TIM_Base_SetConfig+0x140>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2d      	ldr	r2, [pc, #180]	@ (8002508 <TIM_Base_SetConfig+0x144>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00f      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a2c      	ldr	r2, [pc, #176]	@ (800250c <TIM_Base_SetConfig+0x148>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00b      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2b      	ldr	r2, [pc, #172]	@ (8002510 <TIM_Base_SetConfig+0x14c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2a      	ldr	r2, [pc, #168]	@ (8002514 <TIM_Base_SetConfig+0x150>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a29      	ldr	r2, [pc, #164]	@ (8002518 <TIM_Base_SetConfig+0x154>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d108      	bne.n	8002488 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800247c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a10      	ldr	r2, [pc, #64]	@ (80024f0 <TIM_Base_SetConfig+0x12c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d003      	beq.n	80024bc <TIM_Base_SetConfig+0xf8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <TIM_Base_SetConfig+0x13c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d103      	bne.n	80024c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f023 0201 	bic.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]
  }
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40000800 	.word	0x40000800
 80024fc:	40000c00 	.word	0x40000c00
 8002500:	40010400 	.word	0x40010400
 8002504:	40014000 	.word	0x40014000
 8002508:	40014400 	.word	0x40014400
 800250c:	40014800 	.word	0x40014800
 8002510:	40001800 	.word	0x40001800
 8002514:	40001c00 	.word	0x40001c00
 8002518:	40002000 	.word	0x40002000

0800251c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f023 0201 	bic.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800254a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f023 0302 	bic.w	r3, r3, #2
 8002564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a20      	ldr	r2, [pc, #128]	@ (80025f4 <TIM_OC1_SetConfig+0xd8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d003      	beq.n	8002580 <TIM_OC1_SetConfig+0x64>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a1f      	ldr	r2, [pc, #124]	@ (80025f8 <TIM_OC1_SetConfig+0xdc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d10c      	bne.n	800259a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0308 	bic.w	r3, r3, #8
 8002586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a15      	ldr	r2, [pc, #84]	@ (80025f4 <TIM_OC1_SetConfig+0xd8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <TIM_OC1_SetConfig+0x8e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a14      	ldr	r2, [pc, #80]	@ (80025f8 <TIM_OC1_SetConfig+0xdc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d111      	bne.n	80025ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	621a      	str	r2, [r3, #32]
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40010400 	.word	0x40010400

080025fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f023 0210 	bic.w	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800262a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0320 	bic.w	r3, r3, #32
 8002646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a22      	ldr	r2, [pc, #136]	@ (80026e0 <TIM_OC2_SetConfig+0xe4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_OC2_SetConfig+0x68>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a21      	ldr	r2, [pc, #132]	@ (80026e4 <TIM_OC2_SetConfig+0xe8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10d      	bne.n	8002680 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800266a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800267e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <TIM_OC2_SetConfig+0xe4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_OC2_SetConfig+0x94>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a16      	ldr	r2, [pc, #88]	@ (80026e4 <TIM_OC2_SetConfig+0xe8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d113      	bne.n	80026b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800269e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	621a      	str	r2, [r3, #32]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40010400 	.word	0x40010400

080026e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a21      	ldr	r2, [pc, #132]	@ (80027c8 <TIM_OC3_SetConfig+0xe0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_OC3_SetConfig+0x66>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a20      	ldr	r2, [pc, #128]	@ (80027cc <TIM_OC3_SetConfig+0xe4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10d      	bne.n	800276a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a16      	ldr	r2, [pc, #88]	@ (80027c8 <TIM_OC3_SetConfig+0xe0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_OC3_SetConfig+0x92>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a15      	ldr	r2, [pc, #84]	@ (80027cc <TIM_OC3_SetConfig+0xe4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d113      	bne.n	80027a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40010400 	.word	0x40010400

080027d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800281a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <TIM_OC4_SetConfig+0xa4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_OC4_SetConfig+0x68>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <TIM_OC4_SetConfig+0xa8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800283e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	621a      	str	r2, [r3, #32]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40010000 	.word	0x40010000
 8002878:	40010400 	.word	0x40010400

0800287c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f023 0201 	bic.w	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 030a 	bic.w	r3, r3, #10
 80028b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028da:	b480      	push	{r7}
 80028dc:	b087      	sub	sp, #28
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 0210 	bic.w	r2, r3, #16
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	031b      	lsls	r3, r3, #12
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002916:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	f043 0307 	orr.w	r3, r3, #7
 800295c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	609a      	str	r2, [r3, #8]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800298a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	021a      	lsls	r2, r3, #8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	431a      	orrs	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	609a      	str	r2, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2201      	movs	r2, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1a      	ldr	r2, [r3, #32]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e05a      	b.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a21      	ldr	r2, [pc, #132]	@ (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a60:	d01d      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1d      	ldr	r2, [pc, #116]	@ (8002adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a18      	ldr	r2, [pc, #96]	@ (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a17      	ldr	r2, [pc, #92]	@ (8002aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a15      	ldr	r2, [pc, #84]	@ (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	40010400 	.word	0x40010400
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40001800 	.word	0x40001800

08002af4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e03d      	b.n	8002b8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e042      	b.n	8002c30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd ff9e 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	@ 0x24
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fdff 	bl	80037e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d175      	bne.n	8002d44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_UART_Transmit+0x2c>
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e06e      	b.n	8002d46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2221      	movs	r2, #33	@ 0x21
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c76:	f7fe f86f 	bl	8000d58 <HAL_GetTick>
 8002c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c90:	d108      	bne.n	8002ca4 <HAL_UART_Transmit+0x6c>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d104      	bne.n	8002ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e003      	b.n	8002cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cac:	e02e      	b.n	8002d0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fb9b 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03a      	b.n	8002d46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	3302      	adds	r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e007      	b.n	8002cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1cb      	bne.n	8002cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2140      	movs	r1, #64	@ 0x40
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fb67 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e006      	b.n	8002d46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e000      	b.n	8002d46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
  }
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b08a      	sub	sp, #40	@ 0x28
 8002d52:	af02      	add	r7, sp, #8
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	f040 8081 	bne.w	8002e72 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_UART_Receive+0x2e>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e079      	b.n	8002e74 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2222      	movs	r2, #34	@ 0x22
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d94:	f7fd ffe0 	bl	8000d58 <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	88fa      	ldrh	r2, [r7, #6]
 8002d9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dae:	d108      	bne.n	8002dc2 <HAL_UART_Receive+0x74>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	e003      	b.n	8002dca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002dca:	e047      	b.n	8002e5c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fb0c 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e042      	b.n	8002e74 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10c      	bne.n	8002e0e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e01f      	b.n	8002e4e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e16:	d007      	beq.n	8002e28 <HAL_UART_Receive+0xda>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_UART_Receive+0xe8>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e008      	b.n	8002e48 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1b2      	bne.n	8002dcc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x66>
 8002ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fbc2 	bl	8003664 <UART_Receive_IT>
      return;
 8002ee0:	e25b      	b.n	800339a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80de 	beq.w	80030a8 <HAL_UART_IRQHandler+0x22c>
 8002eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002efc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80d1 	beq.w	80030a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_UART_IRQHandler+0xae>
 8002f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_UART_IRQHandler+0xd2>
 8002f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	f043 0202 	orr.w	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_UART_IRQHandler+0xf6>
 8002f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f043 0204 	orr.w	r2, r3, #4
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d011      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x126>
 8002f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f043 0208 	orr.w	r2, r3, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 81f2 	beq.w	8003390 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_UART_IRQHandler+0x14e>
 8002fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fb4d 	bl	8003664 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd4:	2b40      	cmp	r3, #64	@ 0x40
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x17a>
 8002fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d04f      	beq.n	8003096 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa55 	bl	80034a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003006:	2b40      	cmp	r3, #64	@ 0x40
 8003008:	d141      	bne.n	800308e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3314      	adds	r3, #20
 8003010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3314      	adds	r3, #20
 8003032:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003036:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800303a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003042:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800304e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1d9      	bne.n	800300a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d013      	beq.n	8003086 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003062:	4a7e      	ldr	r2, [pc, #504]	@ (800325c <HAL_UART_IRQHandler+0x3e0>)
 8003064:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe f825 	bl	80010ba <HAL_DMA_Abort_IT>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003080:	4610      	mov	r0, r2
 8003082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	e00e      	b.n	80030a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f99e 	bl	80033c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	e00a      	b.n	80030a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f99a 	bl	80033c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	e006      	b.n	80030a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f996 	bl	80033c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80030a2:	e175      	b.n	8003390 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	bf00      	nop
    return;
 80030a6:	e173      	b.n	8003390 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 814f 	bne.w	8003350 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8148 	beq.w	8003350 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8141 	beq.w	8003350 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ee:	2b40      	cmp	r3, #64	@ 0x40
 80030f0:	f040 80b6 	bne.w	8003260 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003100:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 8145 	beq.w	8003394 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800310e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003112:	429a      	cmp	r2, r3
 8003114:	f080 813e 	bcs.w	8003394 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800311e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312a:	f000 8088 	beq.w	800323e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	330c      	adds	r3, #12
 8003134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800314c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800315a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800315e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003166:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1d9      	bne.n	800312e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3314      	adds	r3, #20
 8003180:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800318a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3314      	adds	r3, #20
 800319a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800319e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e1      	bne.n	800317a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3314      	adds	r3, #20
 80031bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3314      	adds	r3, #20
 80031d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e3      	bne.n	80031b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003206:	e853 3f00 	ldrex	r3, [r3]
 800320a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800320c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800320e:	f023 0310 	bic.w	r3, r3, #16
 8003212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003220:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003222:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003226:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800322e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e3      	bne.n	80031fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fece 	bl	8000fda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800324c:	b29b      	uxth	r3, r3
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	b29b      	uxth	r3, r3
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8c1 	bl	80033dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800325a:	e09b      	b.n	8003394 <HAL_UART_IRQHandler+0x518>
 800325c:	0800356d 	.word	0x0800356d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003268:	b29b      	uxth	r3, r3
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 808e 	beq.w	8003398 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800327c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8089 	beq.w	8003398 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800329c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80032ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e3      	bne.n	8003286 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3314      	adds	r3, #20
 80032c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	623b      	str	r3, [r7, #32]
   return(result);
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3314      	adds	r3, #20
 80032de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80032e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ea:	e841 2300 	strex	r3, r2, [r1]
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1e3      	bne.n	80032be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	60fb      	str	r3, [r7, #12]
   return(result);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0310 	bic.w	r3, r3, #16
 800331a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003328:	61fa      	str	r2, [r7, #28]
 800332a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	617b      	str	r3, [r7, #20]
   return(result);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e3      	bne.n	8003304 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f847 	bl	80033dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800334e:	e023      	b.n	8003398 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <HAL_UART_IRQHandler+0x4f4>
 800335c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f913 	bl	8003594 <UART_Transmit_IT>
    return;
 800336e:	e014      	b.n	800339a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00e      	beq.n	800339a <HAL_UART_IRQHandler+0x51e>
 800337c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f953 	bl	8003634 <UART_EndTransmit_IT>
    return;
 800338e:	e004      	b.n	800339a <HAL_UART_IRQHandler+0x51e>
    return;
 8003390:	bf00      	nop
 8003392:	e002      	b.n	800339a <HAL_UART_IRQHandler+0x51e>
      return;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_UART_IRQHandler+0x51e>
      return;
 8003398:	bf00      	nop
  }
}
 800339a:	37e8      	adds	r7, #232	@ 0xe8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	e03b      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800340c:	d037      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fd fca3 	bl	8000d58 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <UART_WaitOnFlagUntilTimeout+0x30>
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e03a      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d023      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b80      	cmp	r3, #128	@ 0x80
 800343a:	d020      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b40      	cmp	r3, #64	@ 0x40
 8003440:	d01d      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d116      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f81d 	bl	80034a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2208      	movs	r2, #8
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d0b4      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b095      	sub	sp, #84	@ 0x54
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e5      	bne.n	80034ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e5      	bne.n	80034e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	2b01      	cmp	r3, #1
 800351c:	d119      	bne.n	8003552 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	60bb      	str	r3, [r7, #8]
   return(result);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f023 0310 	bic.w	r3, r3, #16
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800353e:	61ba      	str	r2, [r7, #24]
 8003540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6979      	ldr	r1, [r7, #20]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	613b      	str	r3, [r7, #16]
   return(result);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003560:	bf00      	nop
 8003562:	3754      	adds	r7, #84	@ 0x54
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff ff1e 	bl	80033c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b21      	cmp	r3, #33	@ 0x21
 80035a6:	d13e      	bne.n	8003626 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b0:	d114      	bne.n	80035dc <UART_Transmit_IT+0x48>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d110      	bne.n	80035dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	1c9a      	adds	r2, r3, #2
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	621a      	str	r2, [r3, #32]
 80035da:	e008      	b.n	80035ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	1c59      	adds	r1, r3, #1
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6211      	str	r1, [r2, #32]
 80035e6:	781a      	ldrb	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4619      	mov	r1, r3
 80035fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003610:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003620:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e000      	b.n	8003628 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fea3 	bl	80033a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08c      	sub	sp, #48	@ 0x30
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b22      	cmp	r3, #34	@ 0x22
 8003676:	f040 80ae 	bne.w	80037d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003682:	d117      	bne.n	80036b4 <UART_Receive_IT+0x50>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d113      	bne.n	80036b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036b2:	e026      	b.n	8003702 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c6:	d007      	beq.n	80036d8 <UART_Receive_IT+0x74>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <UART_Receive_IT+0x82>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e008      	b.n	80036f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4619      	mov	r1, r3
 8003710:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003712:	2b00      	cmp	r3, #0
 8003714:	d15d      	bne.n	80037d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0220 	bic.w	r2, r2, #32
 8003724:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	2b01      	cmp	r3, #1
 800375a:	d135      	bne.n	80037c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	613b      	str	r3, [r7, #16]
   return(result);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f023 0310 	bic.w	r3, r3, #16
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003782:	623a      	str	r2, [r7, #32]
 8003784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	69f9      	ldr	r1, [r7, #28]
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d10a      	bne.n	80037ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fe0b 	bl	80033dc <HAL_UARTEx_RxEventCallback>
 80037c6:	e002      	b.n	80037ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fdf3 	bl	80033b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e002      	b.n	80037d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3730      	adds	r7, #48	@ 0x30
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e4:	b0c0      	sub	sp, #256	@ 0x100
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	ea40 0301 	orr.w	r3, r0, r1
 8003808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003838:	f021 010c 	bic.w	r1, r1, #12
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003846:	430b      	orrs	r3, r1
 8003848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	6999      	ldr	r1, [r3, #24]
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	ea40 0301 	orr.w	r3, r0, r1
 8003866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <UART_SetConfig+0x2cc>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d005      	beq.n	8003880 <UART_SetConfig+0xa0>
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ab0 <UART_SetConfig+0x2d0>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d104      	bne.n	800388a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7fe fa92 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 8003884:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003888:	e003      	b.n	8003892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800388a:	f7fe fa79 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 800388e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800389c:	f040 810c 	bne.w	8003ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	1891      	adds	r1, r2, r2
 80038b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ba:	415b      	adcs	r3, r3
 80038bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038c2:	4621      	mov	r1, r4
 80038c4:	eb12 0801 	adds.w	r8, r2, r1
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb43 0901 	adc.w	r9, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e2:	4690      	mov	r8, r2
 80038e4:	4699      	mov	r9, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	eb18 0303 	adds.w	r3, r8, r3
 80038ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038f0:	462b      	mov	r3, r5
 80038f2:	eb49 0303 	adc.w	r3, r9, r3
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003906:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800390a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800390e:	460b      	mov	r3, r1
 8003910:	18db      	adds	r3, r3, r3
 8003912:	653b      	str	r3, [r7, #80]	@ 0x50
 8003914:	4613      	mov	r3, r2
 8003916:	eb42 0303 	adc.w	r3, r2, r3
 800391a:	657b      	str	r3, [r7, #84]	@ 0x54
 800391c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003924:	f7fc fc50 	bl	80001c8 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4b61      	ldr	r3, [pc, #388]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 800392e:	fba3 2302 	umull	r2, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	011c      	lsls	r4, r3, #4
 8003936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003940:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003948:	4642      	mov	r2, r8
 800394a:	464b      	mov	r3, r9
 800394c:	1891      	adds	r1, r2, r2
 800394e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003950:	415b      	adcs	r3, r3
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003958:	4641      	mov	r1, r8
 800395a:	eb12 0a01 	adds.w	sl, r2, r1
 800395e:	4649      	mov	r1, r9
 8003960:	eb43 0b01 	adc.w	fp, r3, r1
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003978:	4692      	mov	sl, r2
 800397a:	469b      	mov	fp, r3
 800397c:	4643      	mov	r3, r8
 800397e:	eb1a 0303 	adds.w	r3, sl, r3
 8003982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003986:	464b      	mov	r3, r9
 8003988:	eb4b 0303 	adc.w	r3, fp, r3
 800398c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800399c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039a4:	460b      	mov	r3, r1
 80039a6:	18db      	adds	r3, r3, r3
 80039a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039aa:	4613      	mov	r3, r2
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ba:	f7fc fc05 	bl	80001c8 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 80039c6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2264      	movs	r2, #100	@ 0x64
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	1acb      	subs	r3, r1, r3
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 80039dc:	fba3 2302 	umull	r2, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039e8:	441c      	add	r4, r3
 80039ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a04:	415b      	adcs	r3, r3
 8003a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	1851      	adds	r1, r2, r1
 8003a10:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a12:	4649      	mov	r1, r9
 8003a14:	414b      	adcs	r3, r1
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a24:	4659      	mov	r1, fp
 8003a26:	00cb      	lsls	r3, r1, #3
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2e:	4651      	mov	r1, sl
 8003a30:	00ca      	lsls	r2, r1, #3
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	4642      	mov	r2, r8
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a40:	464b      	mov	r3, r9
 8003a42:	460a      	mov	r2, r1
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a60:	460b      	mov	r3, r1
 8003a62:	18db      	adds	r3, r3, r3
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a66:	4613      	mov	r3, r2
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a76:	f7fc fba7 	bl	80001c8 <__aeabi_uldivmod>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 8003a80:	fba3 1302 	umull	r1, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2164      	movs	r1, #100	@ 0x64
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	3332      	adds	r3, #50	@ 0x32
 8003a92:	4a08      	ldr	r2, [pc, #32]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 0207 	and.w	r2, r3, #7
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4422      	add	r2, r4
 8003aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa8:	e106      	b.n	8003cb8 <UART_SetConfig+0x4d8>
 8003aaa:	bf00      	nop
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40011400 	.word	0x40011400
 8003ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aca:	4642      	mov	r2, r8
 8003acc:	464b      	mov	r3, r9
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	6239      	str	r1, [r7, #32]
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ada:	4641      	mov	r1, r8
 8003adc:	1854      	adds	r4, r2, r1
 8003ade:	4649      	mov	r1, r9
 8003ae0:	eb43 0501 	adc.w	r5, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	00eb      	lsls	r3, r5, #3
 8003aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	18e3      	adds	r3, r4, r3
 8003afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b00:	464b      	mov	r3, r9
 8003b02:	eb45 0303 	adc.w	r3, r5, r3
 8003b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b26:	4629      	mov	r1, r5
 8003b28:	008b      	lsls	r3, r1, #2
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b30:	4621      	mov	r1, r4
 8003b32:	008a      	lsls	r2, r1, #2
 8003b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b38:	f7fc fb46 	bl	80001c8 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b60      	ldr	r3, [pc, #384]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011c      	lsls	r4, r3, #4
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	61b9      	str	r1, [r7, #24]
 8003b64:	415b      	adcs	r3, r3
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	1851      	adds	r1, r2, r1
 8003b70:	6139      	str	r1, [r7, #16]
 8003b72:	4649      	mov	r1, r9
 8003b74:	414b      	adcs	r3, r1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b84:	4659      	mov	r1, fp
 8003b86:	00cb      	lsls	r3, r1, #3
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8e:	4651      	mov	r1, sl
 8003b90:	00ca      	lsls	r2, r1, #3
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	4642      	mov	r2, r8
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	4641      	mov	r1, r8
 8003bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bce:	4641      	mov	r1, r8
 8003bd0:	008a      	lsls	r2, r1, #2
 8003bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bd6:	f7fc faf7 	bl	80001c8 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b38      	ldr	r3, [pc, #224]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	@ 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	3332      	adds	r3, #50	@ 0x32
 8003bf4:	4a33      	ldr	r2, [pc, #204]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c00:	441c      	add	r4, r3
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c20:	4641      	mov	r1, r8
 8003c22:	1851      	adds	r1, r2, r1
 8003c24:	6039      	str	r1, [r7, #0]
 8003c26:	4649      	mov	r1, r9
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c38:	4659      	mov	r1, fp
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4651      	mov	r1, sl
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c52:	464b      	mov	r3, r9
 8003c54:	460a      	mov	r2, r1
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c74:	4649      	mov	r1, r9
 8003c76:	008b      	lsls	r3, r1, #2
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7e:	4641      	mov	r1, r8
 8003c80:	008a      	lsls	r2, r1, #2
 8003c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c86:	f7fc fa9f 	bl	80001c8 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	2164      	movs	r1, #100	@ 0x64
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	3332      	adds	r3, #50	@ 0x32
 8003ca2:	4a08      	ldr	r2, [pc, #32]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4422      	add	r2, r4
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc4:	51eb851f 	.word	0x51eb851f

08003cc8 <memset>:
 8003cc8:	4402      	add	r2, r0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <__libc_init_array>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	4d0d      	ldr	r5, [pc, #52]	@ (8003d10 <__libc_init_array+0x38>)
 8003cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8003d14 <__libc_init_array+0x3c>)
 8003cde:	1b64      	subs	r4, r4, r5
 8003ce0:	10a4      	asrs	r4, r4, #2
 8003ce2:	2600      	movs	r6, #0
 8003ce4:	42a6      	cmp	r6, r4
 8003ce6:	d109      	bne.n	8003cfc <__libc_init_array+0x24>
 8003ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8003d18 <__libc_init_array+0x40>)
 8003cea:	4c0c      	ldr	r4, [pc, #48]	@ (8003d1c <__libc_init_array+0x44>)
 8003cec:	f000 f818 	bl	8003d20 <_init>
 8003cf0:	1b64      	subs	r4, r4, r5
 8003cf2:	10a4      	asrs	r4, r4, #2
 8003cf4:	2600      	movs	r6, #0
 8003cf6:	42a6      	cmp	r6, r4
 8003cf8:	d105      	bne.n	8003d06 <__libc_init_array+0x2e>
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d00:	4798      	blx	r3
 8003d02:	3601      	adds	r6, #1
 8003d04:	e7ee      	b.n	8003ce4 <__libc_init_array+0xc>
 8003d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0a:	4798      	blx	r3
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	e7f2      	b.n	8003cf6 <__libc_init_array+0x1e>
 8003d10:	08003df0 	.word	0x08003df0
 8003d14:	08003df0 	.word	0x08003df0
 8003d18:	08003df0 	.word	0x08003df0
 8003d1c:	08003df4 	.word	0x08003df4

08003d20 <_init>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr

08003d2c <_fini>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr
