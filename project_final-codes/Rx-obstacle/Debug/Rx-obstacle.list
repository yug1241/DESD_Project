
Rx-obstacle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ce4  08002ce4  00003ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf4  08002cf4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cfc  08002cfc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cfc  08002cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d00  08002d00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000090  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a238  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c0  00000000  00000000  0000e274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0000fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000837  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020180  00000000  00000000  00010e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adfc  00000000  00000000  00030f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c762c  00000000  00000000  0003bd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001033bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ce4  00000000  00000000  00103404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001060e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ccc 	.word	0x08002ccc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ccc 	.word	0x08002ccc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fb12 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f808 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f946 	bl	8000754 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004c8:	f000 f86e 	bl	80005a8 <MX_CAN1_Init>
  MX_TIM8_Init();
 80004cc:	f000 f8a2 	bl	8000614 <MX_TIM8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <main+0x18>

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	@ 0x50
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0320 	add.w	r3, r7, #32
 80004de:	2230      	movs	r2, #48	@ 0x30
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fbc6 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <SystemClock_Config+0xcc>)
 80004fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000500:	4a27      	ldr	r2, [pc, #156]	@ (80005a0 <SystemClock_Config+0xcc>)
 8000502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000506:	6413      	str	r3, [r2, #64]	@ 0x40
 8000508:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <SystemClock_Config+0xcc>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <SystemClock_Config+0xd0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a21      	ldr	r2, [pc, #132]	@ (80005a4 <SystemClock_Config+0xd0>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <SystemClock_Config+0xd0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	2310      	movs	r3, #16
 800053a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053c:	2302      	movs	r3, #2
 800053e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000540:	2300      	movs	r3, #0
 8000542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000544:	2308      	movs	r3, #8
 8000546:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000548:	2332      	movs	r3, #50	@ 0x32
 800054a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800054c:	2304      	movs	r3, #4
 800054e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000550:	2307      	movs	r3, #7
 8000552:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0320 	add.w	r3, r7, #32
 8000558:	4618      	mov	r0, r3
 800055a:	f001 f931 	bl	80017c0 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000564:	f000 f96e 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2302      	movs	r3, #2
 800056e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000574:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800057e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fb92 	bl	8001cb0 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000592:	f000 f957 	bl	8000844 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3750      	adds	r7, #80	@ 0x50
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40007000 	.word	0x40007000

080005a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <MX_CAN1_Init+0x64>)
 80005ae:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <MX_CAN1_Init+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 72-1;
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <MX_CAN1_Init+0x64>)
 80005b4:	2247      	movs	r2, #71	@ 0x47
 80005b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_CAN1_Init+0x64>)
 80005c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_CAN1_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_CAN1_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_CAN1_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_CAN1_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_CAN1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_CAN1_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_CAN1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_CAN1_Init+0x64>)
 80005f8:	f000 fae6 	bl	8000bc8 <HAL_CAN_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000602:	f000 f91f 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000028 	.word	0x20000028
 8000610:	40006400 	.word	0x40006400

08000614 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b096      	sub	sp, #88	@ 0x58
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2220      	movs	r2, #32
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fb11 	bl	8002c74 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000652:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <MX_TIM8_Init+0x138>)
 8000654:	4a3e      	ldr	r2, [pc, #248]	@ (8000750 <MX_TIM8_Init+0x13c>)
 8000656:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8000658:	4b3c      	ldr	r3, [pc, #240]	@ (800074c <MX_TIM8_Init+0x138>)
 800065a:	2247      	movs	r2, #71	@ 0x47
 800065c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b3b      	ldr	r3, [pc, #236]	@ (800074c <MX_TIM8_Init+0x138>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8000664:	4b39      	ldr	r3, [pc, #228]	@ (800074c <MX_TIM8_Init+0x138>)
 8000666:	2263      	movs	r2, #99	@ 0x63
 8000668:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b38      	ldr	r3, [pc, #224]	@ (800074c <MX_TIM8_Init+0x138>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000670:	4b36      	ldr	r3, [pc, #216]	@ (800074c <MX_TIM8_Init+0x138>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b35      	ldr	r3, [pc, #212]	@ (800074c <MX_TIM8_Init+0x138>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800067c:	4833      	ldr	r0, [pc, #204]	@ (800074c <MX_TIM8_Init+0x138>)
 800067e:	f001 fd03 	bl	8002088 <HAL_TIM_Base_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000688:	f000 f8dc 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000692:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000696:	4619      	mov	r1, r3
 8000698:	482c      	ldr	r0, [pc, #176]	@ (800074c <MX_TIM8_Init+0x138>)
 800069a:	f001 fe5f 	bl	800235c <HAL_TIM_ConfigClockSource>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80006a4:	f000 f8ce 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80006a8:	4828      	ldr	r0, [pc, #160]	@ (800074c <MX_TIM8_Init+0x138>)
 80006aa:	f001 fd3c 	bl	8002126 <HAL_TIM_PWM_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80006b4:	f000 f8c6 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006c4:	4619      	mov	r1, r3
 80006c6:	4821      	ldr	r0, [pc, #132]	@ (800074c <MX_TIM8_Init+0x138>)
 80006c8:	f002 fa06 	bl	8002ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f8b7 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d6:	2360      	movs	r3, #96	@ 0x60
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	4814      	ldr	r0, [pc, #80]	@ (800074c <MX_TIM8_Init+0x138>)
 80006fc:	f001 fd6c 	bl	80021d8 <HAL_TIM_PWM_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8000706:	f000 f89d 	bl	8000844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800071e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000722:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <MX_TIM8_Init+0x138>)
 800072e:	f002 fa4f 	bl	8002bd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000738:	f000 f884 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <MX_TIM8_Init+0x138>)
 800073e:	f000 f921 	bl	8000984 <HAL_TIM_MspPostInit>

}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	@ 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000050 	.word	0x20000050
 8000750:	40010400 	.word	0x40010400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <MX_GPIO_Init+0xe4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a31      	ldr	r2, [pc, #196]	@ (8000838 <MX_GPIO_Init+0xe4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_GPIO_Init+0xe4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <MX_GPIO_Init+0xe4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a2a      	ldr	r2, [pc, #168]	@ (8000838 <MX_GPIO_Init+0xe4>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <MX_GPIO_Init+0xe4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <MX_GPIO_Init+0xe4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <MX_GPIO_Init+0xe4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_GPIO_Init+0xe4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_GPIO_Init+0xe4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_GPIO_Init+0xe4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_GPIO_Init+0xe4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007e0:	4816      	ldr	r0, [pc, #88]	@ (800083c <MX_GPIO_Init+0xe8>)
 80007e2:	f000 ffd3 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80007ec:	4814      	ldr	r0, [pc, #80]	@ (8000840 <MX_GPIO_Init+0xec>)
 80007ee:	f000 ffcd 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007f2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_GPIO_Init+0xe8>)
 800080c:	f000 fe22 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000810:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_GPIO_Init+0xec>)
 800082a:	f000 fe13 	bl	8001454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	@ 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40020800 	.word	0x40020800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000864:	6453      	str	r3, [r2, #68]	@ 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088e:	2007      	movs	r0, #7
 8000890:	f000 fd9e 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000934 <HAL_CAN_MspInit+0x94>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d134      	bne.n	800092c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_CAN_MspInit+0x98>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <HAL_CAN_MspInit+0x98>)
 80008cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_CAN_MspInit+0x98>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_CAN_MspInit+0x98>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <HAL_CAN_MspInit+0x98>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_CAN_MspInit+0x98>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800090c:	2309      	movs	r3, #9
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4809      	ldr	r0, [pc, #36]	@ (800093c <HAL_CAN_MspInit+0x9c>)
 8000918:	f000 fd9c 	bl	8001454 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2014      	movs	r0, #20
 8000922:	f000 fd60 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000926:	2014      	movs	r0, #20
 8000928:	f000 fd79 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40006400 	.word	0x40006400
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400

08000940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <HAL_TIM_Base_MspInit+0x3c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d10d      	bne.n	800096e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <HAL_TIM_Base_MspInit+0x40>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a09      	ldr	r2, [pc, #36]	@ (8000980 <HAL_TIM_Base_MspInit+0x40>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <HAL_TIM_Base_MspInit+0x40>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40010400 	.word	0x40010400
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <HAL_TIM_MspPostInit+0x68>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d11d      	bne.n	80009e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_TIM_MspPostInit+0x6c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <HAL_TIM_MspPostInit+0x6c>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_TIM_MspPostInit+0x6c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009c2:	2340      	movs	r3, #64	@ 0x40
 80009c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <HAL_TIM_MspPostInit+0x70>)
 80009de:	f000 fd39 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40010400 	.word	0x40010400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 f89b 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <CAN1_RX0_IRQHandler+0x10>)
 8000a5e:	f000 f9ae 	bl	8000dbe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000028 	.word	0x20000028

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a94:	f7ff ffea 	bl	8000a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	@ (8000ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8000adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f002 f8e1 	bl	8002c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fcf9 	bl	80004b8 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad4:	08002d04 	.word	0x08002d04
  ldr r2, =_sbss
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000adc:	2000009c 	.word	0x2000009c

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	@ (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 fc5f 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fe9a 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fc77 	bl	800143a <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b64:	f000 fc3f 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	@ (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000098 	.word	0x20000098

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000098 	.word	0x20000098

08000bc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0ed      	b.n	8000db6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fe5a 	bl	80008a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0201 	orr.w	r2, r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfc:	f7ff ffd8 	bl	8000bb0 <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c02:	e012      	b.n	8000c2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c04:	f7ff ffd4 	bl	8000bb0 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d90b      	bls.n	8000c2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2205      	movs	r2, #5
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e0c5      	b.n	8000db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0e5      	beq.n	8000c04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0202 	bic.w	r2, r2, #2
 8000c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c48:	f7ff ffb2 	bl	8000bb0 <HAL_GetTick>
 8000c4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c4e:	e012      	b.n	8000c76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c50:	f7ff ffae 	bl	8000bb0 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d90b      	bls.n	8000c76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e09f      	b.n	8000db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1e5      	bne.n	8000c50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7e1b      	ldrb	r3, [r3, #24]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d108      	bne.n	8000c9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e007      	b.n	8000cae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7e5b      	ldrb	r3, [r3, #25]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d108      	bne.n	8000cc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e007      	b.n	8000cd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7e9b      	ldrb	r3, [r3, #26]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d108      	bne.n	8000cf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f042 0220 	orr.w	r2, r2, #32
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e007      	b.n	8000d02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0220 	bic.w	r2, r2, #32
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7edb      	ldrb	r3, [r3, #27]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d108      	bne.n	8000d1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0210 	bic.w	r2, r2, #16
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e007      	b.n	8000d2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0210 	orr.w	r2, r2, #16
 8000d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7f1b      	ldrb	r3, [r3, #28]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d108      	bne.n	8000d46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0208 	orr.w	r2, r2, #8
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e007      	b.n	8000d56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0208 	bic.w	r2, r2, #8
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7f5b      	ldrb	r3, [r3, #29]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d108      	bne.n	8000d70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0204 	orr.w	r2, r2, #4
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e007      	b.n	8000d80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0204 	bic.w	r2, r2, #4
 8000d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	ea42 0103 	orr.w	r1, r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	1e5a      	subs	r2, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b08a      	sub	sp, #40	@ 0x28
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d07c      	beq.n	8000efe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d023      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2201      	movs	r2, #1
 8000e14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 f983 	bl	800112c <HAL_CAN_TxMailbox0CompleteCallback>
 8000e26:	e016      	b.n	8000e56 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d004      	beq.n	8000e3c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e3a:	e00c      	b.n	8000e56 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d004      	beq.n	8000e50 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e4e:	e002      	b.n	8000e56 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 f989 	bl	8001168 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d024      	beq.n	8000eaa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f963 	bl	8001140 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e7a:	e016      	b.n	8000eaa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e8e:	e00c      	b.n	8000eaa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d004      	beq.n	8000ea4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea2:	e002      	b.n	8000eaa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f969 	bl	800117c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d024      	beq.n	8000efe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ebc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f943 	bl	8001154 <HAL_CAN_TxMailbox2CompleteCallback>
 8000ece:	e016      	b.n	8000efe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ee2:	e00c      	b.n	8000efe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d004      	beq.n	8000ef8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef6:	e002      	b.n	8000efe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f949 	bl	8001190 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00c      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d007      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2210      	movs	r2, #16
 8000f20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00b      	beq.n	8000f44 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f93a 	bl	80011b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d009      	beq.n	8000f62 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f921 	bl	80011a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00c      	beq.n	8000f86 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2210      	movs	r2, #16
 8000f84:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	f003 0320 	and.w	r3, r3, #32
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00b      	beq.n	8000fa8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f91c 	bl	80011e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d009      	beq.n	8000fc6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f903 	bl	80011cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00b      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2210      	movs	r2, #16
 8000fe0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f906 	bl	80011f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2208      	movs	r2, #8
 8001002:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f8ff 	bl	8001208 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d07b      	beq.n	800110c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d072      	beq.n	8001104 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001078:	2b00      	cmp	r3, #0
 800107a:	d043      	beq.n	8001104 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001082:	2b00      	cmp	r3, #0
 8001084:	d03e      	beq.n	8001104 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800108c:	2b60      	cmp	r3, #96	@ 0x60
 800108e:	d02b      	beq.n	80010e8 <HAL_CAN_IRQHandler+0x32a>
 8001090:	2b60      	cmp	r3, #96	@ 0x60
 8001092:	d82e      	bhi.n	80010f2 <HAL_CAN_IRQHandler+0x334>
 8001094:	2b50      	cmp	r3, #80	@ 0x50
 8001096:	d022      	beq.n	80010de <HAL_CAN_IRQHandler+0x320>
 8001098:	2b50      	cmp	r3, #80	@ 0x50
 800109a:	d82a      	bhi.n	80010f2 <HAL_CAN_IRQHandler+0x334>
 800109c:	2b40      	cmp	r3, #64	@ 0x40
 800109e:	d019      	beq.n	80010d4 <HAL_CAN_IRQHandler+0x316>
 80010a0:	2b40      	cmp	r3, #64	@ 0x40
 80010a2:	d826      	bhi.n	80010f2 <HAL_CAN_IRQHandler+0x334>
 80010a4:	2b30      	cmp	r3, #48	@ 0x30
 80010a6:	d010      	beq.n	80010ca <HAL_CAN_IRQHandler+0x30c>
 80010a8:	2b30      	cmp	r3, #48	@ 0x30
 80010aa:	d822      	bhi.n	80010f2 <HAL_CAN_IRQHandler+0x334>
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d002      	beq.n	80010b6 <HAL_CAN_IRQHandler+0x2f8>
 80010b0:	2b20      	cmp	r3, #32
 80010b2:	d005      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010b4:	e01d      	b.n	80010f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010be:	e019      	b.n	80010f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010c8:	e014      	b.n	80010f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	f043 0320 	orr.w	r3, r3, #32
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010d2:	e00f      	b.n	80010f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010dc:	e00a      	b.n	80010f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010e6:	e005      	b.n	80010f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010f0:	e000      	b.n	80010f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80010f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	699a      	ldr	r2, [r3, #24]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001102:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2204      	movs	r2, #4
 800110a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	2b00      	cmp	r3, #0
 8001110:	d008      	beq.n	8001124 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f87c 	bl	800121c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	@ (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e16b      	b.n	8001748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 815a 	bne.w	8001742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80b4 	beq.w	8001742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b60      	ldr	r3, [pc, #384]	@ (8001760 <HAL_GPIO_Init+0x30c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001760 <HAL_GPIO_Init+0x30c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001760 <HAL_GPIO_Init+0x30c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001764 <HAL_GPIO_Init+0x310>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	@ (8001768 <HAL_GPIO_Init+0x314>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d02b      	beq.n	800167a <HAL_GPIO_Init+0x226>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a51      	ldr	r2, [pc, #324]	@ (800176c <HAL_GPIO_Init+0x318>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d025      	beq.n	8001676 <HAL_GPIO_Init+0x222>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a50      	ldr	r2, [pc, #320]	@ (8001770 <HAL_GPIO_Init+0x31c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01f      	beq.n	8001672 <HAL_GPIO_Init+0x21e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4f      	ldr	r2, [pc, #316]	@ (8001774 <HAL_GPIO_Init+0x320>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4e      	ldr	r2, [pc, #312]	@ (8001778 <HAL_GPIO_Init+0x324>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x216>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4d      	ldr	r2, [pc, #308]	@ (800177c <HAL_GPIO_Init+0x328>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4c      	ldr	r2, [pc, #304]	@ (8001780 <HAL_GPIO_Init+0x32c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4b      	ldr	r2, [pc, #300]	@ (8001784 <HAL_GPIO_Init+0x330>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x20a>
 800165a:	2307      	movs	r3, #7
 800165c:	e00e      	b.n	800167c <HAL_GPIO_Init+0x228>
 800165e:	2308      	movs	r3, #8
 8001660:	e00c      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001662:	2306      	movs	r3, #6
 8001664:	e00a      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001666:	2305      	movs	r3, #5
 8001668:	e008      	b.n	800167c <HAL_GPIO_Init+0x228>
 800166a:	2304      	movs	r3, #4
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x228>
 800166e:	2303      	movs	r3, #3
 8001670:	e004      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001672:	2302      	movs	r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x228>
 800167a:	2300      	movs	r3, #0
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f002 0203 	and.w	r2, r2, #3
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4093      	lsls	r3, r2
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800168c:	4935      	ldr	r1, [pc, #212]	@ (8001764 <HAL_GPIO_Init+0x310>)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169a:	4b3b      	ldr	r3, [pc, #236]	@ (8001788 <HAL_GPIO_Init+0x334>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016be:	4a32      	ldr	r2, [pc, #200]	@ (8001788 <HAL_GPIO_Init+0x334>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c4:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <HAL_GPIO_Init+0x334>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e8:	4a27      	ldr	r2, [pc, #156]	@ (8001788 <HAL_GPIO_Init+0x334>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ee:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <HAL_GPIO_Init+0x334>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001712:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <HAL_GPIO_Init+0x334>)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <HAL_GPIO_Init+0x334>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173c:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <HAL_GPIO_Init+0x334>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	f67f ae90 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3724      	adds	r7, #36	@ 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40013800 	.word	0x40013800
 8001768:	40020000 	.word	0x40020000
 800176c:	40020400 	.word	0x40020400
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40021000 	.word	0x40021000
 800177c:	40021400 	.word	0x40021400
 8001780:	40021800 	.word	0x40021800
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40013c00 	.word	0x40013c00

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e267      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d075      	beq.n	80018ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017de:	4b88      	ldr	r3, [pc, #544]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d00c      	beq.n	8001804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ea:	4b85      	ldr	r3, [pc, #532]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d112      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f6:	4b82      	ldr	r3, [pc, #520]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001802:	d10b      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4b7e      	ldr	r3, [pc, #504]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05b      	beq.n	80018c8 <HAL_RCC_OscConfig+0x108>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d157      	bne.n	80018c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e242      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x74>
 8001826:	4b76      	ldr	r3, [pc, #472]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a75      	ldr	r2, [pc, #468]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b70      	ldr	r3, [pc, #448]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6f      	ldr	r2, [pc, #444]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6c      	ldr	r2, [pc, #432]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001858:	4b69      	ldr	r3, [pc, #420]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a68      	ldr	r2, [pc, #416]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b66      	ldr	r3, [pc, #408]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff f99a 	bl	8000bb0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f996 	bl	8000bb0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e207      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b5b      	ldr	r3, [pc, #364]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xc0>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff f986 	bl	8000bb0 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff f982 	bl	8000bb0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	@ 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1f3      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	4b51      	ldr	r3, [pc, #324]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0xe8>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d063      	beq.n	800199e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d11c      	bne.n	8001928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ee:	4b44      	ldr	r3, [pc, #272]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x152>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1c7      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4937      	ldr	r1, [pc, #220]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	e03a      	b.n	800199e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001930:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <HAL_RCC_OscConfig+0x244>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff f93b 	bl	8000bb0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff f937 	bl	8000bb0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e1a8      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	4b2b      	ldr	r3, [pc, #172]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b28      	ldr	r3, [pc, #160]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4925      	ldr	r1, [pc, #148]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001972:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <HAL_RCC_OscConfig+0x244>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f91a 	bl	8000bb0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff f916 	bl	8000bb0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e187      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d036      	beq.n	8001a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d016      	beq.n	80019e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_RCC_OscConfig+0x248>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f8fa 	bl	8000bb0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff f8f6 	bl	8000bb0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e167      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_RCC_OscConfig+0x240>)
 80019d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x200>
 80019de:	e01b      	b.n	8001a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_RCC_OscConfig+0x248>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff f8e3 	bl	8000bb0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	e00e      	b.n	8001a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ee:	f7ff f8df 	bl	8000bb0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d907      	bls.n	8001a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e150      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
 8001a00:	40023800 	.word	0x40023800
 8001a04:	42470000 	.word	0x42470000
 8001a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4b88      	ldr	r3, [pc, #544]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ea      	bne.n	80019ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8097 	beq.w	8001b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b81      	ldr	r3, [pc, #516]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a46:	4b7a      	ldr	r3, [pc, #488]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b77      	ldr	r3, [pc, #476]	@ (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d118      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b74      	ldr	r3, [pc, #464]	@ (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a73      	ldr	r2, [pc, #460]	@ (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f89f 	bl	8000bb0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a76:	f7ff f89b 	bl	8000bb0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e10c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b6a      	ldr	r3, [pc, #424]	@ (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2ea>
 8001a9c:	4b64      	ldr	r3, [pc, #400]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa0:	4a63      	ldr	r2, [pc, #396]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x324>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b05      	cmp	r3, #5
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x30c>
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	4a5e      	ldr	r2, [pc, #376]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001abe:	4b5c      	ldr	r3, [pc, #368]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x324>
 8001acc:	4b58      	ldr	r3, [pc, #352]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad0:	4a57      	ldr	r2, [pc, #348]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad8:	4b55      	ldr	r3, [pc, #340]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001adc:	4a54      	ldr	r2, [pc, #336]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d015      	beq.n	8001b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f860 	bl	8000bb0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff f85c 	bl	8000bb0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0cb      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	4b49      	ldr	r3, [pc, #292]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0ee      	beq.n	8001af4 <HAL_RCC_OscConfig+0x334>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7ff f84a 	bl	8000bb0 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff f846 	bl	8000bb0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0b5      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b36:	4b3e      	ldr	r3, [pc, #248]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ee      	bne.n	8001b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	4a38      	ldr	r2, [pc, #224]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a1 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b5e:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d05c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d141      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f81a 	bl	8000bb0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff f816 	bl	8000bb0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e087      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	4b27      	ldr	r3, [pc, #156]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69da      	ldr	r2, [r3, #28]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	019b      	lsls	r3, r3, #6
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	061b      	lsls	r3, r3, #24
 8001bc2:	491b      	ldr	r1, [pc, #108]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7fe ffef 	bl	8000bb0 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7fe ffeb 	bl	8000bb0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e05c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x416>
 8001bf4:	e054      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ffd8 	bl	8000bb0 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe ffd4 	bl	8000bb0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e045      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x444>
 8001c22:	e03d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e038      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x4ec>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d028      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d121      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d11a      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d111      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	3b01      	subs	r3, #1
 8001c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0cc      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b68      	ldr	r3, [pc, #416]	@ (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d90c      	bls.n	8001cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b65      	ldr	r3, [pc, #404]	@ (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a58      	ldr	r2, [pc, #352]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d044      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d119      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e067      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b37      	ldr	r3, [pc, #220]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4934      	ldr	r1, [pc, #208]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7fe ff06 	bl	8000bb0 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7fe ff02 	bl	8000bb0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e04f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d20c      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490a      	ldr	r1, [pc, #40]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fe66 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	08002ce4 	.word	0x08002ce4
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e80:	b094      	sub	sp, #80	@ 0x50
 8001e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e88:	2300      	movs	r3, #0
 8001e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e94:	4b79      	ldr	r3, [pc, #484]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d00d      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x40>
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	f200 80e1 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eae:	e0db      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4b73      	ldr	r3, [pc, #460]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001eb4:	e0db      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eb6:	4b73      	ldr	r3, [pc, #460]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x208>)
 8001eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eba:	e0d8      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ec4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	2200      	movs	r2, #0
 8001eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001edc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001eee:	4622      	mov	r2, r4
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	0159      	lsls	r1, r3, #5
 8001efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f00:	0150      	lsls	r0, r2, #5
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4621      	mov	r1, r4
 8001f08:	1a51      	subs	r1, r2, r1
 8001f0a:	6139      	str	r1, [r7, #16]
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f20:	4659      	mov	r1, fp
 8001f22:	018b      	lsls	r3, r1, #6
 8001f24:	4651      	mov	r1, sl
 8001f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2a:	4651      	mov	r1, sl
 8001f2c:	018a      	lsls	r2, r1, #6
 8001f2e:	4651      	mov	r1, sl
 8001f30:	ebb2 0801 	subs.w	r8, r2, r1
 8001f34:	4659      	mov	r1, fp
 8001f36:	eb63 0901 	sbc.w	r9, r3, r1
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f4e:	4690      	mov	r8, r2
 8001f50:	4699      	mov	r9, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	eb18 0303 	adds.w	r3, r8, r3
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	eb49 0303 	adc.w	r3, r9, r3
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	024b      	lsls	r3, r1, #9
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f78:	4621      	mov	r1, r4
 8001f7a:	024a      	lsls	r2, r1, #9
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f8c:	f7fe f91c 	bl	80001c8 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f98:	e058      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4b38      	ldr	r3, [pc, #224]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fb4:	4642      	mov	r2, r8
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	f04f 0000 	mov.w	r0, #0
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	0159      	lsls	r1, r3, #5
 8001fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc6:	0150      	lsls	r0, r2, #5
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4641      	mov	r1, r8
 8001fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fec:	ebb2 040a 	subs.w	r4, r2, sl
 8001ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	00eb      	lsls	r3, r5, #3
 8001ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002002:	00e2      	lsls	r2, r4, #3
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	4643      	mov	r3, r8
 800200a:	18e3      	adds	r3, r4, r3
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	464b      	mov	r3, r9
 8002010:	eb45 0303 	adc.w	r3, r5, r3
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002022:	4629      	mov	r1, r5
 8002024:	028b      	lsls	r3, r1, #10
 8002026:	4621      	mov	r1, r4
 8002028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202c:	4621      	mov	r1, r4
 800202e:	028a      	lsls	r2, r1, #10
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002036:	2200      	movs	r2, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	61fa      	str	r2, [r7, #28]
 800203c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002040:	f7fe f8c2 	bl	80001c8 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4613      	mov	r3, r2
 800204a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	3301      	adds	r3, #1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800205c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800205e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x204>)
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002070:	4618      	mov	r0, r3
 8002072:	3750      	adds	r7, #80	@ 0x50
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e041      	b.n	800211e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fc46 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 fa10 	bl	80024ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e041      	b.n	80021bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f839 	bl	80021c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f000 f9c1 	bl	80024ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e0ae      	b.n	8002354 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	f200 809f 	bhi.w	8002344 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002206:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	08002241 	.word	0x08002241
 8002210:	08002345 	.word	0x08002345
 8002214:	08002345 	.word	0x08002345
 8002218:	08002345 	.word	0x08002345
 800221c:	08002281 	.word	0x08002281
 8002220:	08002345 	.word	0x08002345
 8002224:	08002345 	.word	0x08002345
 8002228:	08002345 	.word	0x08002345
 800222c:	080022c3 	.word	0x080022c3
 8002230:	08002345 	.word	0x08002345
 8002234:	08002345 	.word	0x08002345
 8002238:	08002345 	.word	0x08002345
 800223c:	08002303 	.word	0x08002303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f9fc 	bl	8002644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0208 	orr.w	r2, r2, #8
 800225a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0204 	bic.w	r2, r2, #4
 800226a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6999      	ldr	r1, [r3, #24]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	619a      	str	r2, [r3, #24]
      break;
 800227e:	e064      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fa4c 	bl	8002724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800229a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6999      	ldr	r1, [r3, #24]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	021a      	lsls	r2, r3, #8
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	619a      	str	r2, [r3, #24]
      break;
 80022c0:	e043      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 faa1 	bl	8002810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0208 	orr.w	r2, r2, #8
 80022dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0204 	bic.w	r2, r2, #4
 80022ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69d9      	ldr	r1, [r3, #28]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	61da      	str	r2, [r3, #28]
      break;
 8002300:	e023      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 faf5 	bl	80028f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800231c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800232c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69d9      	ldr	r1, [r3, #28]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	021a      	lsls	r2, r3, #8
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	61da      	str	r2, [r3, #28]
      break;
 8002342:	e002      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	75fb      	strb	r3, [r7, #23]
      break;
 8002348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002352:	7dfb      	ldrb	r3, [r7, #23]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_TIM_ConfigClockSource+0x1c>
 8002374:	2302      	movs	r3, #2
 8002376:	e0b4      	b.n	80024e2 <HAL_TIM_ConfigClockSource+0x186>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800239e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b0:	d03e      	beq.n	8002430 <HAL_TIM_ConfigClockSource+0xd4>
 80023b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b6:	f200 8087 	bhi.w	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023be:	f000 8086 	beq.w	80024ce <HAL_TIM_ConfigClockSource+0x172>
 80023c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c6:	d87f      	bhi.n	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
 80023c8:	2b70      	cmp	r3, #112	@ 0x70
 80023ca:	d01a      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0xa6>
 80023cc:	2b70      	cmp	r3, #112	@ 0x70
 80023ce:	d87b      	bhi.n	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b60      	cmp	r3, #96	@ 0x60
 80023d2:	d050      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x11a>
 80023d4:	2b60      	cmp	r3, #96	@ 0x60
 80023d6:	d877      	bhi.n	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b50      	cmp	r3, #80	@ 0x50
 80023da:	d03c      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0xfa>
 80023dc:	2b50      	cmp	r3, #80	@ 0x50
 80023de:	d873      	bhi.n	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b40      	cmp	r3, #64	@ 0x40
 80023e2:	d058      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x13a>
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d86f      	bhi.n	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b30      	cmp	r3, #48	@ 0x30
 80023ea:	d064      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x15a>
 80023ec:	2b30      	cmp	r3, #48	@ 0x30
 80023ee:	d86b      	bhi.n	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d060      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x15a>
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d867      	bhi.n	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d05c      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x15a>
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d05a      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002400:	e062      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002412:	f000 fb41 	bl	8002a98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	609a      	str	r2, [r3, #8]
      break;
 800242e:	e04f      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002440:	f000 fb2a 	bl	8002a98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002452:	609a      	str	r2, [r3, #8]
      break;
 8002454:	e03c      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	461a      	mov	r2, r3
 8002464:	f000 fa9e 	bl	80029a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2150      	movs	r1, #80	@ 0x50
 800246e:	4618      	mov	r0, r3
 8002470:	f000 faf7 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002474:	e02c      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002482:	461a      	mov	r2, r3
 8002484:	f000 fabd 	bl	8002a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2160      	movs	r1, #96	@ 0x60
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fae7 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002494:	e01c      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a2:	461a      	mov	r2, r3
 80024a4:	f000 fa7e 	bl	80029a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2140      	movs	r1, #64	@ 0x40
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fad7 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 80024b4:	e00c      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f000 face 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 80024c6:	e003      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      break;
 80024cc:	e000      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a46      	ldr	r2, [pc, #280]	@ (8002618 <TIM_Base_SetConfig+0x12c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d013      	beq.n	800252c <TIM_Base_SetConfig+0x40>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800250a:	d00f      	beq.n	800252c <TIM_Base_SetConfig+0x40>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a43      	ldr	r2, [pc, #268]	@ (800261c <TIM_Base_SetConfig+0x130>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00b      	beq.n	800252c <TIM_Base_SetConfig+0x40>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a42      	ldr	r2, [pc, #264]	@ (8002620 <TIM_Base_SetConfig+0x134>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <TIM_Base_SetConfig+0x40>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a41      	ldr	r2, [pc, #260]	@ (8002624 <TIM_Base_SetConfig+0x138>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0x40>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a40      	ldr	r2, [pc, #256]	@ (8002628 <TIM_Base_SetConfig+0x13c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a35      	ldr	r2, [pc, #212]	@ (8002618 <TIM_Base_SetConfig+0x12c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02b      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800254c:	d027      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a32      	ldr	r2, [pc, #200]	@ (800261c <TIM_Base_SetConfig+0x130>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d023      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <TIM_Base_SetConfig+0x134>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01f      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a30      	ldr	r2, [pc, #192]	@ (8002624 <TIM_Base_SetConfig+0x138>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01b      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a2f      	ldr	r2, [pc, #188]	@ (8002628 <TIM_Base_SetConfig+0x13c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d017      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a2e      	ldr	r2, [pc, #184]	@ (800262c <TIM_Base_SetConfig+0x140>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a2d      	ldr	r2, [pc, #180]	@ (8002630 <TIM_Base_SetConfig+0x144>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00f      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a2c      	ldr	r2, [pc, #176]	@ (8002634 <TIM_Base_SetConfig+0x148>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00b      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a2b      	ldr	r2, [pc, #172]	@ (8002638 <TIM_Base_SetConfig+0x14c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a2a      	ldr	r2, [pc, #168]	@ (800263c <TIM_Base_SetConfig+0x150>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <TIM_Base_SetConfig+0xb2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a29      	ldr	r2, [pc, #164]	@ (8002640 <TIM_Base_SetConfig+0x154>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d108      	bne.n	80025b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a10      	ldr	r2, [pc, #64]	@ (8002618 <TIM_Base_SetConfig+0x12c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0xf8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <TIM_Base_SetConfig+0x13c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d103      	bne.n	80025ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f023 0201 	bic.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	611a      	str	r2, [r3, #16]
  }
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40010000 	.word	0x40010000
 800261c:	40000400 	.word	0x40000400
 8002620:	40000800 	.word	0x40000800
 8002624:	40000c00 	.word	0x40000c00
 8002628:	40010400 	.word	0x40010400
 800262c:	40014000 	.word	0x40014000
 8002630:	40014400 	.word	0x40014400
 8002634:	40014800 	.word	0x40014800
 8002638:	40001800 	.word	0x40001800
 800263c:	40001c00 	.word	0x40001c00
 8002640:	40002000 	.word	0x40002000

08002644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f023 0201 	bic.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 0302 	bic.w	r3, r3, #2
 800268c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a20      	ldr	r2, [pc, #128]	@ (800271c <TIM_OC1_SetConfig+0xd8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <TIM_OC1_SetConfig+0x64>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <TIM_OC1_SetConfig+0xdc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10c      	bne.n	80026c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0308 	bic.w	r3, r3, #8
 80026ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a15      	ldr	r2, [pc, #84]	@ (800271c <TIM_OC1_SetConfig+0xd8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d003      	beq.n	80026d2 <TIM_OC1_SetConfig+0x8e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <TIM_OC1_SetConfig+0xdc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40010000 	.word	0x40010000
 8002720:	40010400 	.word	0x40010400

08002724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f023 0210 	bic.w	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800275a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f023 0320 	bic.w	r3, r3, #32
 800276e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <TIM_OC2_SetConfig+0xe4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d003      	beq.n	800278c <TIM_OC2_SetConfig+0x68>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a21      	ldr	r2, [pc, #132]	@ (800280c <TIM_OC2_SetConfig+0xe8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10d      	bne.n	80027a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <TIM_OC2_SetConfig+0xe4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_OC2_SetConfig+0x94>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a16      	ldr	r2, [pc, #88]	@ (800280c <TIM_OC2_SetConfig+0xe8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d113      	bne.n	80027e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	621a      	str	r2, [r3, #32]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40010000 	.word	0x40010000
 800280c:	40010400 	.word	0x40010400

08002810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a21      	ldr	r2, [pc, #132]	@ (80028f0 <TIM_OC3_SetConfig+0xe0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <TIM_OC3_SetConfig+0x66>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a20      	ldr	r2, [pc, #128]	@ (80028f4 <TIM_OC3_SetConfig+0xe4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10d      	bne.n	8002892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800287c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <TIM_OC3_SetConfig+0xe0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d003      	beq.n	80028a2 <TIM_OC3_SetConfig+0x92>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a15      	ldr	r2, [pc, #84]	@ (80028f4 <TIM_OC3_SetConfig+0xe4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d113      	bne.n	80028ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	621a      	str	r2, [r3, #32]
}
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010400 	.word	0x40010400

080028f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	031b      	lsls	r3, r3, #12
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a12      	ldr	r2, [pc, #72]	@ (800299c <TIM_OC4_SetConfig+0xa4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_OC4_SetConfig+0x68>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a11      	ldr	r2, [pc, #68]	@ (80029a0 <TIM_OC4_SetConfig+0xa8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d109      	bne.n	8002974 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40010400 	.word	0x40010400

080029a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0201 	bic.w	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f023 030a 	bic.w	r3, r3, #10
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	621a      	str	r2, [r3, #32]
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b087      	sub	sp, #28
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f023 0210 	bic.w	r2, r3, #16
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	031b      	lsls	r3, r3, #12
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f043 0307 	orr.w	r3, r3, #7
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	021a      	lsls	r2, r3, #8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e05a      	b.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	@ (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d01d      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d018      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a17      	ldr	r2, [pc, #92]	@ (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a15      	ldr	r2, [pc, #84]	@ (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10c      	bne.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	40010400 	.word	0x40010400
 8002bc8:	40014000 	.word	0x40014000
 8002bcc:	40001800 	.word	0x40001800

08002bd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e03d      	b.n	8002c68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <memset>:
 8002c74:	4402      	add	r2, r0
 8002c76:	4603      	mov	r3, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <__libc_init_array>:
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	4d0d      	ldr	r5, [pc, #52]	@ (8002cbc <__libc_init_array+0x38>)
 8002c88:	4c0d      	ldr	r4, [pc, #52]	@ (8002cc0 <__libc_init_array+0x3c>)
 8002c8a:	1b64      	subs	r4, r4, r5
 8002c8c:	10a4      	asrs	r4, r4, #2
 8002c8e:	2600      	movs	r6, #0
 8002c90:	42a6      	cmp	r6, r4
 8002c92:	d109      	bne.n	8002ca8 <__libc_init_array+0x24>
 8002c94:	4d0b      	ldr	r5, [pc, #44]	@ (8002cc4 <__libc_init_array+0x40>)
 8002c96:	4c0c      	ldr	r4, [pc, #48]	@ (8002cc8 <__libc_init_array+0x44>)
 8002c98:	f000 f818 	bl	8002ccc <_init>
 8002c9c:	1b64      	subs	r4, r4, r5
 8002c9e:	10a4      	asrs	r4, r4, #2
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	42a6      	cmp	r6, r4
 8002ca4:	d105      	bne.n	8002cb2 <__libc_init_array+0x2e>
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cac:	4798      	blx	r3
 8002cae:	3601      	adds	r6, #1
 8002cb0:	e7ee      	b.n	8002c90 <__libc_init_array+0xc>
 8002cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb6:	4798      	blx	r3
 8002cb8:	3601      	adds	r6, #1
 8002cba:	e7f2      	b.n	8002ca2 <__libc_init_array+0x1e>
 8002cbc:	08002cfc 	.word	0x08002cfc
 8002cc0:	08002cfc 	.word	0x08002cfc
 8002cc4:	08002cfc 	.word	0x08002cfc
 8002cc8:	08002d00 	.word	0x08002d00

08002ccc <_init>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr

08002cd8 <_fini>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr
