
Tx-obstacle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003914  08003914  00004914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800392c  0800392c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800392c  0800392c  0000492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003934  08003934  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003938  08003938  00004938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800393c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000120  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da40  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c60  00000000  00000000  00012a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  000146e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a26  00000000  00000000  000153d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020677  00000000  00000000  00015df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8d2  00000000  00000000  0003646d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9ce9  00000000  00000000  00043d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010da28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003728  00000000  00000000  0010da6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00111194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038fc 	.word	0x080038fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038fc 	.word	0x080038fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc4e 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f80c 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f9a6 	bl	8000814 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004c8:	f000 f872 	bl	80005b0 <MX_CAN1_Init>
  MX_TIM13_Init();
 80004cc:	f000 f92a 	bl	8000724 <MX_TIM13_Init>
  MX_TIM8_Init();
 80004d0:	f000 f8a4 	bl	800061c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80004d4:	f000 f974 	bl	80007c0 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <main+0x20>

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	@ 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	@ 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 f9da 	bl	80038a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b28      	ldr	r3, [pc, #160]	@ (80005a8 <SystemClock_Config+0xcc>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000508:	4a27      	ldr	r2, [pc, #156]	@ (80005a8 <SystemClock_Config+0xcc>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000510:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <SystemClock_Config+0xd0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a21      	ldr	r2, [pc, #132]	@ (80005ac <SystemClock_Config+0xd0>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000538:	2302      	movs	r3, #2
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	2301      	movs	r3, #1
 800053e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000540:	2310      	movs	r3, #16
 8000542:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2302      	movs	r3, #2
 8000546:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000548:	2300      	movs	r3, #0
 800054a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800054c:	2308      	movs	r3, #8
 800054e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000550:	2332      	movs	r3, #50	@ 0x32
 8000552:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000554:	2304      	movs	r3, #4
 8000556:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000558:	2307      	movs	r3, #7
 800055a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fa8d 	bl	8001a80 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800056c:	f000 fa06 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2302      	movs	r3, #2
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fcee 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800059a:	f000 f9ef 	bl	800097c <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3750      	adds	r7, #80	@ 0x50
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40007000 	.word	0x40007000

080005b0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005b4:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005b6:	4a18      	ldr	r2, [pc, #96]	@ (8000618 <MX_CAN1_Init+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 72-1;
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005bc:	2247      	movs	r2, #71	@ 0x47
 80005be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005d2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_CAN1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_CAN1_Init+0x64>)
 8000600:	f000 fc1e 	bl	8000e40 <HAL_CAN_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800060a:	f000 f9b7 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000028 	.word	0x20000028
 8000618:	40006400 	.word	0x40006400

0800061c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	@ 0x30
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000648:	4b34      	ldr	r3, [pc, #208]	@ (800071c <MX_TIM8_Init+0x100>)
 800064a:	4a35      	ldr	r2, [pc, #212]	@ (8000720 <MX_TIM8_Init+0x104>)
 800064c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 800064e:	4b33      	ldr	r3, [pc, #204]	@ (800071c <MX_TIM8_Init+0x100>)
 8000650:	224f      	movs	r2, #79	@ 0x4f
 8000652:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b31      	ldr	r3, [pc, #196]	@ (800071c <MX_TIM8_Init+0x100>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <MX_TIM8_Init+0x100>)
 800065c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000660:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b2e      	ldr	r3, [pc, #184]	@ (800071c <MX_TIM8_Init+0x100>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000668:	4b2c      	ldr	r3, [pc, #176]	@ (800071c <MX_TIM8_Init+0x100>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <MX_TIM8_Init+0x100>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000674:	4829      	ldr	r0, [pc, #164]	@ (800071c <MX_TIM8_Init+0x100>)
 8000676:	f001 fe9b 	bl	80023b0 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000680:	f000 f97c 	bl	800097c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000684:	4825      	ldr	r0, [pc, #148]	@ (800071c <MX_TIM8_Init+0x100>)
 8000686:	f001 ff3b 	bl	8002500 <HAL_TIM_IC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000690:	f000 f974 	bl	800097c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000694:	2304      	movs	r3, #4
 8000696:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000698:	2360      	movs	r3, #96	@ 0x60
 800069a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800069c:	230a      	movs	r3, #10
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	481c      	ldr	r0, [pc, #112]	@ (800071c <MX_TIM8_Init+0x100>)
 80006ac:	f002 f8e0 	bl	8002870 <HAL_TIM_SlaveConfigSynchro>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80006b6:	f000 f961 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_TIM8_Init+0x100>)
 80006ca:	f002 fdab 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80006d4:	f000 f952 	bl	800097c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80006d8:	230a      	movs	r3, #10
 80006da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006dc:	2301      	movs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_TIM8_Init+0x100>)
 80006f0:	f001 ff5f 	bl	80025b2 <HAL_TIM_IC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 80006fa:	f000 f93f 	bl	800097c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2204      	movs	r2, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_TIM8_Init+0x100>)
 8000706:	f001 ff54 	bl	80025b2 <HAL_TIM_IC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000710:	f000 f934 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3730      	adds	r7, #48	@ 0x30
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000050 	.word	0x20000050
 8000720:	40010400 	.word	0x40010400

08000724 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
 8000738:	615a      	str	r2, [r3, #20]
 800073a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_TIM13_Init+0x94>)
 800073e:	4a1f      	ldr	r2, [pc, #124]	@ (80007bc <MX_TIM13_Init+0x98>)
 8000740:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 199;
 8000742:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <MX_TIM13_Init+0x94>)
 8000744:	22c7      	movs	r2, #199	@ 0xc7
 8000746:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_TIM13_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 39999;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_TIM13_Init+0x94>)
 8000750:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000754:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_TIM13_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_TIM13_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000762:	4815      	ldr	r0, [pc, #84]	@ (80007b8 <MX_TIM13_Init+0x94>)
 8000764:	f001 fe24 	bl	80023b0 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800076e:	f000 f905 	bl	800097c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000772:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <MX_TIM13_Init+0x94>)
 8000774:	f001 fe6b 	bl	800244e <HAL_TIM_PWM_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800077e:	f000 f8fd 	bl	800097c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000782:	2360      	movs	r3, #96	@ 0x60
 8000784:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4807      	ldr	r0, [pc, #28]	@ (80007b8 <MX_TIM13_Init+0x94>)
 800079a:	f001 ffa7 	bl	80026ec <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80007a4:	f000 f8ea 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <MX_TIM13_Init+0x94>)
 80007aa:	f000 f9c3 	bl	8000b34 <HAL_TIM_MspPostInit>

}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000098 	.word	0x20000098
 80007bc:	40001c00 	.word	0x40001c00

080007c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART3_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART3_UART_Init+0x4c>)
 80007f8:	f002 fd90 	bl	800331c <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f8bb 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000e0 	.word	0x200000e0
 8000810:	40004800 	.word	0x40004800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <MX_GPIO_Init+0x158>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a4e      	ldr	r2, [pc, #312]	@ (800096c <MX_GPIO_Init+0x158>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b4c      	ldr	r3, [pc, #304]	@ (800096c <MX_GPIO_Init+0x158>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b48      	ldr	r3, [pc, #288]	@ (800096c <MX_GPIO_Init+0x158>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a47      	ldr	r2, [pc, #284]	@ (800096c <MX_GPIO_Init+0x158>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b45      	ldr	r3, [pc, #276]	@ (800096c <MX_GPIO_Init+0x158>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <MX_GPIO_Init+0x158>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a40      	ldr	r2, [pc, #256]	@ (800096c <MX_GPIO_Init+0x158>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b3e      	ldr	r3, [pc, #248]	@ (800096c <MX_GPIO_Init+0x158>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b3a      	ldr	r3, [pc, #232]	@ (800096c <MX_GPIO_Init+0x158>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a39      	ldr	r2, [pc, #228]	@ (800096c <MX_GPIO_Init+0x158>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b37      	ldr	r3, [pc, #220]	@ (800096c <MX_GPIO_Init+0x158>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b33      	ldr	r3, [pc, #204]	@ (800096c <MX_GPIO_Init+0x158>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a32      	ldr	r2, [pc, #200]	@ (800096c <MX_GPIO_Init+0x158>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b30      	ldr	r3, [pc, #192]	@ (800096c <MX_GPIO_Init+0x158>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008bc:	482c      	ldr	r0, [pc, #176]	@ (8000970 <MX_GPIO_Init+0x15c>)
 80008be:	f001 f8a1 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80008c8:	482a      	ldr	r0, [pc, #168]	@ (8000974 <MX_GPIO_Init+0x160>)
 80008ca:	f001 f89b 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80008ce:	2317      	movs	r3, #23
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4825      	ldr	r0, [pc, #148]	@ (8000978 <MX_GPIO_Init+0x164>)
 80008e4:	f000 fef2 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008e8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	481b      	ldr	r0, [pc, #108]	@ (8000970 <MX_GPIO_Init+0x15c>)
 8000902:	f000 fee3 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000906:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4815      	ldr	r0, [pc, #84]	@ (8000974 <MX_GPIO_Init+0x160>)
 8000920:	f000 fed4 	bl	80016cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2006      	movs	r0, #6
 800092a:	f000 fe98 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800092e:	2006      	movs	r0, #6
 8000930:	f000 feb1 	bl	8001696 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2007      	movs	r0, #7
 800093a:	f000 fe90 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 fea9 	bl	8001696 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2008      	movs	r0, #8
 800094a:	f000 fe88 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800094e:	2008      	movs	r0, #8
 8000950:	f000 fea1 	bl	8001696 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	200a      	movs	r0, #10
 800095a:	f000 fe80 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800095e:	200a      	movs	r0, #10
 8000960:	f000 fe99 	bl	8001696 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	@ 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40020800 	.word	0x40020800
 8000978:	40020000 	.word	0x40020000

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099c:	6453      	str	r3, [r2, #68]	@ 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c6:	2007      	movs	r0, #7
 80009c8:	f000 fe3e 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <HAL_CAN_MspInit+0x94>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d134      	bne.n	8000a64 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <HAL_CAN_MspInit+0x98>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a1b      	ldr	r2, [pc, #108]	@ (8000a70 <HAL_CAN_MspInit+0x98>)
 8000a04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_CAN_MspInit+0x98>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_CAN_MspInit+0x98>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <HAL_CAN_MspInit+0x98>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_CAN_MspInit+0x98>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a44:	2309      	movs	r3, #9
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <HAL_CAN_MspInit+0x9c>)
 8000a50:	f000 fe3c 	bl	80016cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2014      	movs	r0, #20
 8000a5a:	f000 fe00 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a5e:	2014      	movs	r0, #20
 8000a60:	f000 fe19 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	@ 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40006400 	.word	0x40006400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400

08000a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a23      	ldr	r2, [pc, #140]	@ (8000b24 <HAL_TIM_Base_MspInit+0xac>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad2:	23c0      	movs	r3, #192	@ 0xc0
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480f      	ldr	r0, [pc, #60]	@ (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000aee:	f000 fded 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000af2:	e012      	b.n	8000b1a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM13)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <HAL_TIM_Base_MspInit+0xb8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10d      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010400 	.word	0x40010400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40001c00 	.word	0x40001c00

08000b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <HAL_TIM_MspPostInit+0x68>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d11d      	bne.n	8000b92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b72:	2340      	movs	r3, #64	@ 0x40
 8000b74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000b82:	2309      	movs	r3, #9
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_TIM_MspPostInit+0x70>)
 8000b8e:	f000 fd9d 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40001c00 	.word	0x40001c00
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	@ (8000c2c <HAL_UART_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_UART_MspInit+0x88>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_UART_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_UART_MspInit+0x88>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_UART_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c02:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c14:	2307      	movs	r3, #7
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <HAL_UART_MspInit+0x8c>)
 8000c20:	f000 fd54 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40004800 	.word	0x40004800
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <NMI_Handler+0x4>

08000c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <MemManage_Handler+0x4>

08000c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f8b7 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fecc 	bl	8001a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f000 fec5 	bl	8001a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000cb6:	2004      	movs	r0, #4
 8000cb8:	f000 febe 	bl	8001a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000cc4:	2010      	movs	r0, #16
 8000cc6:	f000 feb7 	bl	8001a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <CAN1_RX0_IRQHandler+0x10>)
 8000cd6:	f000 f9ae 	bl	8001036 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000028 	.word	0x20000028

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f002 fdbd 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fbbd 	bl	80004b8 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d4c:	0800393c 	.word	0x0800393c
  ldr r2, =_sbss
 8000d50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d54:	2000012c 	.word	0x2000012c

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 fc5f 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fdfa 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fc77 	bl	80016b2 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ddc:	f000 fc3f 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000128 	.word	0x20000128

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000128 	.word	0x20000128

08000e40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0ed      	b.n	800102e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fdba 	bl	80009d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0201 	orr.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e74:	f7ff ffd8 	bl	8000e28 <HAL_GetTick>
 8000e78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7a:	e012      	b.n	8000ea2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e7c:	f7ff ffd4 	bl	8000e28 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b0a      	cmp	r3, #10
 8000e88:	d90b      	bls.n	8000ea2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2205      	movs	r2, #5
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0c5      	b.n	800102e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0e5      	beq.n	8000e7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0202 	bic.w	r2, r2, #2
 8000ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec0:	f7ff ffb2 	bl	8000e28 <HAL_GetTick>
 8000ec4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ec6:	e012      	b.n	8000eee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec8:	f7ff ffae 	bl	8000e28 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b0a      	cmp	r3, #10
 8000ed4:	d90b      	bls.n	8000eee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2205      	movs	r2, #5
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e09f      	b.n	800102e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1e5      	bne.n	8000ec8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7e1b      	ldrb	r3, [r3, #24]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d108      	bne.n	8000f16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e007      	b.n	8000f26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7e5b      	ldrb	r3, [r3, #25]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d108      	bne.n	8000f40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e007      	b.n	8000f50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7e9b      	ldrb	r3, [r3, #26]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d108      	bne.n	8000f6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0220 	orr.w	r2, r2, #32
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e007      	b.n	8000f7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0220 	bic.w	r2, r2, #32
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7edb      	ldrb	r3, [r3, #27]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d108      	bne.n	8000f94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0210 	bic.w	r2, r2, #16
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e007      	b.n	8000fa4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0210 	orr.w	r2, r2, #16
 8000fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7f1b      	ldrb	r3, [r3, #28]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d108      	bne.n	8000fbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0208 	orr.w	r2, r2, #8
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e007      	b.n	8000fce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0208 	bic.w	r2, r2, #8
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7f5b      	ldrb	r3, [r3, #29]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d108      	bne.n	8000fe8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0204 	orr.w	r2, r2, #4
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0204 	bic.w	r2, r2, #4
 8000ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	ea42 0103 	orr.w	r1, r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b08a      	sub	sp, #40	@ 0x28
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d07c      	beq.n	8001176 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d023      	beq.n	80010ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f983 	bl	80013a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800109e:	e016      	b.n	80010ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b2:	e00c      	b.n	80010ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c6:	e002      	b.n	80010ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f989 	bl	80013e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d024      	beq.n	8001122 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f963 	bl	80013b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80010f2:	e016      	b.n	8001122 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
 8001106:	e00c      	b.n	8001122 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
 800111a:	e002      	b.n	8001122 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f969 	bl	80013f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d024      	beq.n	8001176 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001134:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f943 	bl	80013cc <HAL_CAN_TxMailbox2CompleteCallback>
 8001146:	e016      	b.n	8001176 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
 800115a:	e00c      	b.n	8001176 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
 800116e:	e002      	b.n	8001176 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f949 	bl	8001408 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2210      	movs	r2, #16
 8001198:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00b      	beq.n	80011bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2208      	movs	r2, #8
 80011b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f93a 	bl	8001430 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f921 	bl	800141c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00c      	beq.n	80011fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2210      	movs	r2, #16
 80011fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2208      	movs	r2, #8
 8001218:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f91c 	bl	8001458 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f903 	bl	8001444 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2210      	movs	r2, #16
 8001258:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f906 	bl	800146c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2208      	movs	r2, #8
 800127a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f8ff 	bl	8001480 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d07b      	beq.n	8001384 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d072      	beq.n	800137c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d043      	beq.n	800137c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d03e      	beq.n	800137c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001304:	2b60      	cmp	r3, #96	@ 0x60
 8001306:	d02b      	beq.n	8001360 <HAL_CAN_IRQHandler+0x32a>
 8001308:	2b60      	cmp	r3, #96	@ 0x60
 800130a:	d82e      	bhi.n	800136a <HAL_CAN_IRQHandler+0x334>
 800130c:	2b50      	cmp	r3, #80	@ 0x50
 800130e:	d022      	beq.n	8001356 <HAL_CAN_IRQHandler+0x320>
 8001310:	2b50      	cmp	r3, #80	@ 0x50
 8001312:	d82a      	bhi.n	800136a <HAL_CAN_IRQHandler+0x334>
 8001314:	2b40      	cmp	r3, #64	@ 0x40
 8001316:	d019      	beq.n	800134c <HAL_CAN_IRQHandler+0x316>
 8001318:	2b40      	cmp	r3, #64	@ 0x40
 800131a:	d826      	bhi.n	800136a <HAL_CAN_IRQHandler+0x334>
 800131c:	2b30      	cmp	r3, #48	@ 0x30
 800131e:	d010      	beq.n	8001342 <HAL_CAN_IRQHandler+0x30c>
 8001320:	2b30      	cmp	r3, #48	@ 0x30
 8001322:	d822      	bhi.n	800136a <HAL_CAN_IRQHandler+0x334>
 8001324:	2b10      	cmp	r3, #16
 8001326:	d002      	beq.n	800132e <HAL_CAN_IRQHandler+0x2f8>
 8001328:	2b20      	cmp	r3, #32
 800132a:	d005      	beq.n	8001338 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800132c:	e01d      	b.n	800136a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001336:	e019      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001340:	e014      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	f043 0320 	orr.w	r3, r3, #32
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800134a:	e00f      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001354:	e00a      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800135e:	e005      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001368:	e000      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            break;
 800136a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800137a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2204      	movs	r2, #4
 8001382:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f87c 	bl	8001494 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	@ 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	@ (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	@ (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	@ (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	@ 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e16b      	b.n	80019c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 815a 	bne.w	80019ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	2b02      	cmp	r3, #2
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b03      	cmp	r3, #3
 800178a:	d017      	beq.n	80017bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80b4 	beq.w	80019ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b60      	ldr	r3, [pc, #384]	@ (80019d8 <HAL_GPIO_Init+0x30c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	4a5f      	ldr	r2, [pc, #380]	@ (80019d8 <HAL_GPIO_Init+0x30c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001860:	6453      	str	r3, [r2, #68]	@ 0x44
 8001862:	4b5d      	ldr	r3, [pc, #372]	@ (80019d8 <HAL_GPIO_Init+0x30c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186e:	4a5b      	ldr	r2, [pc, #364]	@ (80019dc <HAL_GPIO_Init+0x310>)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a52      	ldr	r2, [pc, #328]	@ (80019e0 <HAL_GPIO_Init+0x314>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d02b      	beq.n	80018f2 <HAL_GPIO_Init+0x226>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a51      	ldr	r2, [pc, #324]	@ (80019e4 <HAL_GPIO_Init+0x318>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d025      	beq.n	80018ee <HAL_GPIO_Init+0x222>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a50      	ldr	r2, [pc, #320]	@ (80019e8 <HAL_GPIO_Init+0x31c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01f      	beq.n	80018ea <HAL_GPIO_Init+0x21e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4f      	ldr	r2, [pc, #316]	@ (80019ec <HAL_GPIO_Init+0x320>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0x21a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x216>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4d      	ldr	r2, [pc, #308]	@ (80019f4 <HAL_GPIO_Init+0x328>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x212>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	@ (80019f8 <HAL_GPIO_Init+0x32c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x20e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	@ (80019fc <HAL_GPIO_Init+0x330>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x20a>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e00e      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018d6:	2308      	movs	r3, #8
 80018d8:	e00c      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018da:	2306      	movs	r3, #6
 80018dc:	e00a      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018de:	2305      	movs	r3, #5
 80018e0:	e008      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018e6:	2303      	movs	r3, #3
 80018e8:	e004      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018f2:	2300      	movs	r3, #0
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f002 0203 	and.w	r2, r2, #3
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	4093      	lsls	r3, r2
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001904:	4935      	ldr	r1, [pc, #212]	@ (80019dc <HAL_GPIO_Init+0x310>)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001912:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <HAL_GPIO_Init+0x334>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001936:	4a32      	ldr	r2, [pc, #200]	@ (8001a00 <HAL_GPIO_Init+0x334>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800193c:	4b30      	ldr	r3, [pc, #192]	@ (8001a00 <HAL_GPIO_Init+0x334>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001960:	4a27      	ldr	r2, [pc, #156]	@ (8001a00 <HAL_GPIO_Init+0x334>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <HAL_GPIO_Init+0x334>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800198a:	4a1d      	ldr	r2, [pc, #116]	@ (8001a00 <HAL_GPIO_Init+0x334>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <HAL_GPIO_Init+0x334>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <HAL_GPIO_Init+0x334>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3301      	adds	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b0f      	cmp	r3, #15
 80019c4:	f67f ae90 	bls.w	80016e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3724      	adds	r7, #36	@ 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40021400 	.word	0x40021400
 80019f8:	40021800 	.word	0x40021800
 80019fc:	40021c00 	.word	0x40021c00
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f806 	bl	8001a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e267      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d075      	beq.n	8001b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9e:	4b88      	ldr	r3, [pc, #544]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4b85      	ldr	r3, [pc, #532]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d112      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b82      	ldr	r3, [pc, #520]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d05b      	beq.n	8001b88 <HAL_RCC_OscConfig+0x108>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d157      	bne.n	8001b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e242      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x74>
 8001ae6:	4b76      	ldr	r3, [pc, #472]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a75      	ldr	r2, [pc, #468]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b70      	ldr	r3, [pc, #448]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6f      	ldr	r2, [pc, #444]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6c      	ldr	r2, [pc, #432]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001b18:	4b69      	ldr	r3, [pc, #420]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a68      	ldr	r2, [pc, #416]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b66      	ldr	r3, [pc, #408]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a65      	ldr	r2, [pc, #404]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f976 	bl	8000e28 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff f972 	bl	8000e28 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	@ 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e207      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xc0>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f962 	bl	8000e28 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff f95e 	bl	8000e28 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	@ 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1f3      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b51      	ldr	r3, [pc, #324]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0xe8>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b96:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b47      	ldr	r3, [pc, #284]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d11c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b44      	ldr	r3, [pc, #272]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	4b41      	ldr	r3, [pc, #260]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1c7      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4937      	ldr	r1, [pc, #220]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	e03a      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_RCC_OscConfig+0x244>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f917 	bl	8000e28 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f913 	bl	8000e28 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1a8      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b28      	ldr	r3, [pc, #160]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4925      	ldr	r1, [pc, #148]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c32:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <HAL_RCC_OscConfig+0x244>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f8f6 	bl	8000e28 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff f8f2 	bl	8000e28 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e187      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d036      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_RCC_OscConfig+0x248>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff f8d6 	bl	8000e28 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff f8d2 	bl	8000e28 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e167      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_RCC_OscConfig+0x240>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x200>
 8001c9e:	e01b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <HAL_RCC_OscConfig+0x248>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f8bf 	bl	8000e28 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	e00e      	b.n	8001ccc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cae:	f7ff f8bb 	bl	8000e28 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d907      	bls.n	8001ccc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e150      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	42470000 	.word	0x42470000
 8001cc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	4b88      	ldr	r3, [pc, #544]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ea      	bne.n	8001cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8097 	beq.w	8001e14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b81      	ldr	r3, [pc, #516]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10f      	bne.n	8001d16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	4a7c      	ldr	r2, [pc, #496]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d06:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b77      	ldr	r3, [pc, #476]	@ (8001ef4 <HAL_RCC_OscConfig+0x474>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b74      	ldr	r3, [pc, #464]	@ (8001ef4 <HAL_RCC_OscConfig+0x474>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a73      	ldr	r2, [pc, #460]	@ (8001ef4 <HAL_RCC_OscConfig+0x474>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f87b 	bl	8000e28 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7ff f877 	bl	8000e28 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e10c      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef4 <HAL_RCC_OscConfig+0x474>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2ea>
 8001d5c:	4b64      	ldr	r3, [pc, #400]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d60:	4a63      	ldr	r2, [pc, #396]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x324>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x30c>
 8001d72:	4b5f      	ldr	r3, [pc, #380]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d76:	4a5e      	ldr	r2, [pc, #376]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0x324>
 8001d8c:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d90:	4a57      	ldr	r2, [pc, #348]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d98:	4b55      	ldr	r3, [pc, #340]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9c:	4a54      	ldr	r2, [pc, #336]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f023 0304 	bic.w	r3, r3, #4
 8001da2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d015      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff f83c 	bl	8000e28 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7ff f838 	bl	8000e28 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e0cb      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	4b49      	ldr	r3, [pc, #292]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ee      	beq.n	8001db4 <HAL_RCC_OscConfig+0x334>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f826 	bl	8000e28 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7ff f822 	bl	8000e28 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0b5      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ee      	bne.n	8001de0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e08:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	4a38      	ldr	r2, [pc, #224]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a1 	beq.w	8001f60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d05c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d141      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <HAL_RCC_OscConfig+0x478>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe fff6 	bl	8000e28 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fff2 	bl	8000e28 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e087      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	019b      	lsls	r3, r3, #6
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	3b01      	subs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	491b      	ldr	r1, [pc, #108]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x478>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe ffcb 	bl	8000e28 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe ffc7 	bl	8000e28 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e05c      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x416>
 8001eb4:	e054      	b.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <HAL_RCC_OscConfig+0x478>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe ffb4 	bl	8000e28 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe ffb0 	bl	8000e28 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e045      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x444>
 8001ee2:	e03d      	b.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e038      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d028      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d121      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d11a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0cc      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b68      	ldr	r3, [pc, #416]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d90c      	bls.n	8001fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b65      	ldr	r3, [pc, #404]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d044      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d119      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d003      	beq.n	800202e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	2b03      	cmp	r3, #3
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b3f      	ldr	r3, [pc, #252]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3b      	ldr	r3, [pc, #236]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e067      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b37      	ldr	r3, [pc, #220]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4934      	ldr	r1, [pc, #208]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7fe fee2 	bl	8000e28 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7fe fede 	bl	8000e28 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e04f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2b      	ldr	r3, [pc, #172]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20c      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	@ (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fe42 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00
 800212c:	40023800 	.word	0x40023800
 8002130:	08003914 	.word	0x08003914
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002140:	b094      	sub	sp, #80	@ 0x50
 8002142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	647b      	str	r3, [r7, #68]	@ 0x44
 8002148:	2300      	movs	r3, #0
 800214a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800214c:	2300      	movs	r3, #0
 800214e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002154:	4b79      	ldr	r3, [pc, #484]	@ (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d00d      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x40>
 8002160:	2b08      	cmp	r3, #8
 8002162:	f200 80e1 	bhi.w	8002328 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x34>
 800216a:	2b04      	cmp	r3, #4
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x3a>
 800216e:	e0db      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b73      	ldr	r3, [pc, #460]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x204>)
 8002172:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002174:	e0db      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002176:	4b73      	ldr	r3, [pc, #460]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x208>)
 8002178:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800217a:	e0d8      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800217c:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002184:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002186:	4b6d      	ldr	r3, [pc, #436]	@ (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d063      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002192:	4b6a      	ldr	r3, [pc, #424]	@ (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	2200      	movs	r2, #0
 800219a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800219c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800219e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021ae:	4622      	mov	r2, r4
 80021b0:	462b      	mov	r3, r5
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	0159      	lsls	r1, r3, #5
 80021bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c0:	0150      	lsls	r0, r2, #5
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4621      	mov	r1, r4
 80021c8:	1a51      	subs	r1, r2, r1
 80021ca:	6139      	str	r1, [r7, #16]
 80021cc:	4629      	mov	r1, r5
 80021ce:	eb63 0301 	sbc.w	r3, r3, r1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021e0:	4659      	mov	r1, fp
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	4651      	mov	r1, sl
 80021e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ea:	4651      	mov	r1, sl
 80021ec:	018a      	lsls	r2, r1, #6
 80021ee:	4651      	mov	r1, sl
 80021f0:	ebb2 0801 	subs.w	r8, r2, r1
 80021f4:	4659      	mov	r1, fp
 80021f6:	eb63 0901 	sbc.w	r9, r3, r1
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800220a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800220e:	4690      	mov	r8, r2
 8002210:	4699      	mov	r9, r3
 8002212:	4623      	mov	r3, r4
 8002214:	eb18 0303 	adds.w	r3, r8, r3
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	462b      	mov	r3, r5
 800221c:	eb49 0303 	adc.w	r3, r9, r3
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800222e:	4629      	mov	r1, r5
 8002230:	024b      	lsls	r3, r1, #9
 8002232:	4621      	mov	r1, r4
 8002234:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002238:	4621      	mov	r1, r4
 800223a:	024a      	lsls	r2, r1, #9
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002242:	2200      	movs	r2, #0
 8002244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002246:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002248:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800224c:	f7fd ffbc 	bl	80001c8 <__aeabi_uldivmod>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4613      	mov	r3, r2
 8002256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002258:	e058      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225a:	4b38      	ldr	r3, [pc, #224]	@ (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	2200      	movs	r2, #0
 8002262:	4618      	mov	r0, r3
 8002264:	4611      	mov	r1, r2
 8002266:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002270:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002274:	4642      	mov	r2, r8
 8002276:	464b      	mov	r3, r9
 8002278:	f04f 0000 	mov.w	r0, #0
 800227c:	f04f 0100 	mov.w	r1, #0
 8002280:	0159      	lsls	r1, r3, #5
 8002282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002286:	0150      	lsls	r0, r2, #5
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4641      	mov	r1, r8
 800228e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002292:	4649      	mov	r1, r9
 8002294:	eb63 0b01 	sbc.w	fp, r3, r1
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ac:	ebb2 040a 	subs.w	r4, r2, sl
 80022b0:	eb63 050b 	sbc.w	r5, r3, fp
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	00eb      	lsls	r3, r5, #3
 80022be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c2:	00e2      	lsls	r2, r4, #3
 80022c4:	4614      	mov	r4, r2
 80022c6:	461d      	mov	r5, r3
 80022c8:	4643      	mov	r3, r8
 80022ca:	18e3      	adds	r3, r4, r3
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	464b      	mov	r3, r9
 80022d0:	eb45 0303 	adc.w	r3, r5, r3
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e2:	4629      	mov	r1, r5
 80022e4:	028b      	lsls	r3, r1, #10
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ec:	4621      	mov	r1, r4
 80022ee:	028a      	lsls	r2, r1, #10
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022f6:	2200      	movs	r2, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	61fa      	str	r2, [r7, #28]
 80022fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002300:	f7fd ff62 	bl	80001c8 <__aeabi_uldivmod>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4613      	mov	r3, r2
 800230a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_RCC_GetSysClockFreq+0x200>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	3301      	adds	r3, #1
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800231c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800231e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x204>)
 800232a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002330:	4618      	mov	r0, r3
 8002332:	3750      	adds	r7, #80	@ 0x50
 8002334:	46bd      	mov	sp, r7
 8002336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	00f42400 	.word	0x00f42400
 8002344:	007a1200 	.word	0x007a1200

08002348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002364:	f7ff fff0 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4903      	ldr	r1, [pc, #12]	@ (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	08003924 	.word	0x08003924

08002388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800238c:	f7ff ffdc 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0b5b      	lsrs	r3, r3, #13
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	@ (80023ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08003924 	.word	0x08003924

080023b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e041      	b.n	8002446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fb4e 	bl	8000a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f000 fa80 	bl	80028f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e041      	b.n	80024e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f839 	bl	80024ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f000 fa31 	bl	80028f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e041      	b.n	8002596 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f839 	bl	800259e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f000 f9d8 	bl	80028f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e088      	b.n	80026e2 <HAL_TIM_IC_ConfigChannel+0x130>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11b      	bne.n	8002616 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80025ee:	f000 fc6f 	bl	8002ed0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 020c 	bic.w	r2, r2, #12
 8002600:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6999      	ldr	r1, [r3, #24]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	619a      	str	r2, [r3, #24]
 8002614:	e060      	b.n	80026d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d11c      	bne.n	8002656 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800262c:	f000 fcf3 	bl	8003016 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800263e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6999      	ldr	r1, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	021a      	lsls	r2, r3, #8
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	619a      	str	r2, [r3, #24]
 8002654:	e040      	b.n	80026d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d11b      	bne.n	8002694 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800266c:	f000 fd40 	bl	80030f0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 020c 	bic.w	r2, r2, #12
 800267e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69d9      	ldr	r1, [r3, #28]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	e021      	b.n	80026d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d11c      	bne.n	80026d4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80026aa:	f000 fd5d 	bl	8003168 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80026bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69d9      	ldr	r1, [r3, #28]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	021a      	lsls	r2, r3, #8
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	61da      	str	r2, [r3, #28]
 80026d2:	e001      	b.n	80026d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002706:	2302      	movs	r3, #2
 8002708:	e0ae      	b.n	8002868 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	f200 809f 	bhi.w	8002858 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800271a:	a201      	add	r2, pc, #4	@ (adr r2, 8002720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002755 	.word	0x08002755
 8002724:	08002859 	.word	0x08002859
 8002728:	08002859 	.word	0x08002859
 800272c:	08002859 	.word	0x08002859
 8002730:	08002795 	.word	0x08002795
 8002734:	08002859 	.word	0x08002859
 8002738:	08002859 	.word	0x08002859
 800273c:	08002859 	.word	0x08002859
 8002740:	080027d7 	.word	0x080027d7
 8002744:	08002859 	.word	0x08002859
 8002748:	08002859 	.word	0x08002859
 800274c:	08002859 	.word	0x08002859
 8002750:	08002817 	.word	0x08002817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f976 	bl	8002a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0208 	orr.w	r2, r2, #8
 800276e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6999      	ldr	r1, [r3, #24]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	619a      	str	r2, [r3, #24]
      break;
 8002792:	e064      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f9c6 	bl	8002b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6999      	ldr	r1, [r3, #24]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	021a      	lsls	r2, r3, #8
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	619a      	str	r2, [r3, #24]
      break;
 80027d4:	e043      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fa1b 	bl	8002c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0208 	orr.w	r2, r2, #8
 80027f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0204 	bic.w	r2, r2, #4
 8002800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69d9      	ldr	r1, [r3, #28]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	61da      	str	r2, [r3, #28]
      break;
 8002814:	e023      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fa6f 	bl	8002d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69d9      	ldr	r1, [r3, #28]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	021a      	lsls	r2, r3, #8
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	61da      	str	r2, [r3, #28]
      break;
 8002856:	e002      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	75fb      	strb	r3, [r7, #23]
      break;
 800285c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002884:	2302      	movs	r3, #2
 8002886:	e031      	b.n	80028ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002898:	6839      	ldr	r1, [r7, #0]
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa86 	bl	8002dac <TIM_SlaveTimer_SetConfig>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e018      	b.n	80028ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a46      	ldr	r2, [pc, #280]	@ (8002a20 <TIM_Base_SetConfig+0x12c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002912:	d00f      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a43      	ldr	r2, [pc, #268]	@ (8002a24 <TIM_Base_SetConfig+0x130>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00b      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a42      	ldr	r2, [pc, #264]	@ (8002a28 <TIM_Base_SetConfig+0x134>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a41      	ldr	r2, [pc, #260]	@ (8002a2c <TIM_Base_SetConfig+0x138>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_Base_SetConfig+0x40>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a40      	ldr	r2, [pc, #256]	@ (8002a30 <TIM_Base_SetConfig+0x13c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d108      	bne.n	8002946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800293a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a35      	ldr	r2, [pc, #212]	@ (8002a20 <TIM_Base_SetConfig+0x12c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d02b      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002954:	d027      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a32      	ldr	r2, [pc, #200]	@ (8002a24 <TIM_Base_SetConfig+0x130>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d023      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a31      	ldr	r2, [pc, #196]	@ (8002a28 <TIM_Base_SetConfig+0x134>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01f      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a30      	ldr	r2, [pc, #192]	@ (8002a2c <TIM_Base_SetConfig+0x138>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01b      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a2f      	ldr	r2, [pc, #188]	@ (8002a30 <TIM_Base_SetConfig+0x13c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d017      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a2e      	ldr	r2, [pc, #184]	@ (8002a34 <TIM_Base_SetConfig+0x140>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a2d      	ldr	r2, [pc, #180]	@ (8002a38 <TIM_Base_SetConfig+0x144>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00f      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a2c      	ldr	r2, [pc, #176]	@ (8002a3c <TIM_Base_SetConfig+0x148>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00b      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a2b      	ldr	r2, [pc, #172]	@ (8002a40 <TIM_Base_SetConfig+0x14c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2a      	ldr	r2, [pc, #168]	@ (8002a44 <TIM_Base_SetConfig+0x150>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a29      	ldr	r2, [pc, #164]	@ (8002a48 <TIM_Base_SetConfig+0x154>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a10      	ldr	r2, [pc, #64]	@ (8002a20 <TIM_Base_SetConfig+0x12c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <TIM_Base_SetConfig+0xf8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <TIM_Base_SetConfig+0x13c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d103      	bne.n	80029f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	611a      	str	r2, [r3, #16]
  }
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40010000 	.word	0x40010000
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40000800 	.word	0x40000800
 8002a2c:	40000c00 	.word	0x40000c00
 8002a30:	40010400 	.word	0x40010400
 8002a34:	40014000 	.word	0x40014000
 8002a38:	40014400 	.word	0x40014400
 8002a3c:	40014800 	.word	0x40014800
 8002a40:	40001800 	.word	0x40001800
 8002a44:	40001c00 	.word	0x40001c00
 8002a48:	40002000 	.word	0x40002000

08002a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f023 0201 	bic.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 0302 	bic.w	r3, r3, #2
 8002a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a20      	ldr	r2, [pc, #128]	@ (8002b24 <TIM_OC1_SetConfig+0xd8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <TIM_OC1_SetConfig+0x64>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b28 <TIM_OC1_SetConfig+0xdc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10c      	bne.n	8002aca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0308 	bic.w	r3, r3, #8
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <TIM_OC1_SetConfig+0xd8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_OC1_SetConfig+0x8e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <TIM_OC1_SetConfig+0xdc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d111      	bne.n	8002afe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40010400 	.word	0x40010400

08002b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 0210 	bic.w	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0320 	bic.w	r3, r3, #32
 8002b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a22      	ldr	r2, [pc, #136]	@ (8002c10 <TIM_OC2_SetConfig+0xe4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_OC2_SetConfig+0x68>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	@ (8002c14 <TIM_OC2_SetConfig+0xe8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10d      	bne.n	8002bb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a17      	ldr	r2, [pc, #92]	@ (8002c10 <TIM_OC2_SetConfig+0xe4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_OC2_SetConfig+0x94>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a16      	ldr	r2, [pc, #88]	@ (8002c14 <TIM_OC2_SetConfig+0xe8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d113      	bne.n	8002be8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40010000 	.word	0x40010000
 8002c14:	40010400 	.word	0x40010400

08002c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a21      	ldr	r2, [pc, #132]	@ (8002cf8 <TIM_OC3_SetConfig+0xe0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_OC3_SetConfig+0x66>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a20      	ldr	r2, [pc, #128]	@ (8002cfc <TIM_OC3_SetConfig+0xe4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10d      	bne.n	8002c9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	@ (8002cf8 <TIM_OC3_SetConfig+0xe0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_OC3_SetConfig+0x92>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a15      	ldr	r2, [pc, #84]	@ (8002cfc <TIM_OC3_SetConfig+0xe4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d113      	bne.n	8002cd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	621a      	str	r2, [r3, #32]
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010400 	.word	0x40010400

08002d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	031b      	lsls	r3, r3, #12
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <TIM_OC4_SetConfig+0xa4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_OC4_SetConfig+0x68>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a11      	ldr	r2, [pc, #68]	@ (8002da8 <TIM_OC4_SetConfig+0xa8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d109      	bne.n	8002d7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40010400 	.word	0x40010400

08002dac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b70      	cmp	r3, #112	@ 0x70
 8002df4:	d01a      	beq.n	8002e2c <TIM_SlaveTimer_SetConfig+0x80>
 8002df6:	2b70      	cmp	r3, #112	@ 0x70
 8002df8:	d860      	bhi.n	8002ebc <TIM_SlaveTimer_SetConfig+0x110>
 8002dfa:	2b60      	cmp	r3, #96	@ 0x60
 8002dfc:	d054      	beq.n	8002ea8 <TIM_SlaveTimer_SetConfig+0xfc>
 8002dfe:	2b60      	cmp	r3, #96	@ 0x60
 8002e00:	d85c      	bhi.n	8002ebc <TIM_SlaveTimer_SetConfig+0x110>
 8002e02:	2b50      	cmp	r3, #80	@ 0x50
 8002e04:	d046      	beq.n	8002e94 <TIM_SlaveTimer_SetConfig+0xe8>
 8002e06:	2b50      	cmp	r3, #80	@ 0x50
 8002e08:	d858      	bhi.n	8002ebc <TIM_SlaveTimer_SetConfig+0x110>
 8002e0a:	2b40      	cmp	r3, #64	@ 0x40
 8002e0c:	d019      	beq.n	8002e42 <TIM_SlaveTimer_SetConfig+0x96>
 8002e0e:	2b40      	cmp	r3, #64	@ 0x40
 8002e10:	d854      	bhi.n	8002ebc <TIM_SlaveTimer_SetConfig+0x110>
 8002e12:	2b30      	cmp	r3, #48	@ 0x30
 8002e14:	d055      	beq.n	8002ec2 <TIM_SlaveTimer_SetConfig+0x116>
 8002e16:	2b30      	cmp	r3, #48	@ 0x30
 8002e18:	d850      	bhi.n	8002ebc <TIM_SlaveTimer_SetConfig+0x110>
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d051      	beq.n	8002ec2 <TIM_SlaveTimer_SetConfig+0x116>
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d84c      	bhi.n	8002ebc <TIM_SlaveTimer_SetConfig+0x110>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04d      	beq.n	8002ec2 <TIM_SlaveTimer_SetConfig+0x116>
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d04b      	beq.n	8002ec2 <TIM_SlaveTimer_SetConfig+0x116>
 8002e2a:	e047      	b.n	8002ebc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002e3c:	f000 f9d1 	bl	80031e2 <TIM_ETR_SetConfig>
      break;
 8002e40:	e040      	b.n	8002ec4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d101      	bne.n	8002e4e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e03b      	b.n	8002ec6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e74:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	621a      	str	r2, [r3, #32]
      break;
 8002e92:	e017      	b.n	8002ec4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f000 f889 	bl	8002fb8 <TIM_TI1_ConfigInputStage>
      break;
 8002ea6:	e00d      	b.n	8002ec4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f000 f8eb 	bl	8003090 <TIM_TI2_ConfigInputStage>
      break;
 8002eba:	e003      	b.n	8002ec4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec0:	e000      	b.n	8002ec4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002ec2:	bf00      	nop
  }

  return status;
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f023 0201 	bic.w	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a28      	ldr	r2, [pc, #160]	@ (8002f9c <TIM_TI1_SetConfig+0xcc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01b      	beq.n	8002f36 <TIM_TI1_SetConfig+0x66>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f04:	d017      	beq.n	8002f36 <TIM_TI1_SetConfig+0x66>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a25      	ldr	r2, [pc, #148]	@ (8002fa0 <TIM_TI1_SetConfig+0xd0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <TIM_TI1_SetConfig+0x66>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a24      	ldr	r2, [pc, #144]	@ (8002fa4 <TIM_TI1_SetConfig+0xd4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00f      	beq.n	8002f36 <TIM_TI1_SetConfig+0x66>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a23      	ldr	r2, [pc, #140]	@ (8002fa8 <TIM_TI1_SetConfig+0xd8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00b      	beq.n	8002f36 <TIM_TI1_SetConfig+0x66>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <TIM_TI1_SetConfig+0xdc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <TIM_TI1_SetConfig+0x66>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4a21      	ldr	r2, [pc, #132]	@ (8002fb0 <TIM_TI1_SetConfig+0xe0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <TIM_TI1_SetConfig+0x66>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a20      	ldr	r2, [pc, #128]	@ (8002fb4 <TIM_TI1_SetConfig+0xe4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <TIM_TI1_SetConfig+0x6a>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <TIM_TI1_SetConfig+0x6c>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e003      	b.n	8002f5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f023 030a 	bic.w	r3, r3, #10
 8002f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f003 030a 	and.w	r3, r3, #10
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	621a      	str	r2, [r3, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40010000 	.word	0x40010000
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40000c00 	.word	0x40000c00
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	40001800 	.word	0x40001800

08002fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0201 	bic.w	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f023 030a 	bic.w	r3, r3, #10
 8002ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	621a      	str	r2, [r3, #32]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003016:	b480      	push	{r7}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f023 0210 	bic.w	r2, r3, #16
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003054:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	031b      	lsls	r3, r3, #12
 800305a:	b29b      	uxth	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0210 	bic.w	r2, r3, #16
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	031b      	lsls	r3, r3, #12
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	621a      	str	r2, [r3, #32]
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f023 0303 	bic.w	r3, r3, #3
 800311c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800312c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	b2db      	uxtb	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003194:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	031b      	lsls	r3, r3, #12
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80031ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	031b      	lsls	r3, r3, #12
 80031c0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b087      	sub	sp, #28
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	021a      	lsls	r2, r3, #8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	431a      	orrs	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4313      	orrs	r3, r2
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	609a      	str	r2, [r3, #8]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e05a      	b.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	@ (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d01d      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1b      	ldr	r2, [pc, #108]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	@ (800330c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	@ (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40001800 	.word	0x40001800

0800331c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e042      	b.n	80033b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd fc30 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	@ 0x24
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800335e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f82b 	bl	80033bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c0:	b0c0      	sub	sp, #256	@ 0x100
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	68d9      	ldr	r1, [r3, #12]
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	ea40 0301 	orr.w	r3, r0, r1
 80033e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003414:	f021 010c 	bic.w	r1, r1, #12
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003422:	430b      	orrs	r3, r1
 8003424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003436:	6999      	ldr	r1, [r3, #24]
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	ea40 0301 	orr.w	r3, r0, r1
 8003442:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b8f      	ldr	r3, [pc, #572]	@ (8003688 <UART_SetConfig+0x2cc>)
 800344c:	429a      	cmp	r2, r3
 800344e:	d005      	beq.n	800345c <UART_SetConfig+0xa0>
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b8d      	ldr	r3, [pc, #564]	@ (800368c <UART_SetConfig+0x2d0>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d104      	bne.n	8003466 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800345c:	f7fe ff94 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 8003460:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003464:	e003      	b.n	800346e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003466:	f7fe ff7b 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 800346a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003478:	f040 810c 	bne.w	8003694 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800347c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003480:	2200      	movs	r2, #0
 8003482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003486:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800348a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800348e:	4622      	mov	r2, r4
 8003490:	462b      	mov	r3, r5
 8003492:	1891      	adds	r1, r2, r2
 8003494:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003496:	415b      	adcs	r3, r3
 8003498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800349a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800349e:	4621      	mov	r1, r4
 80034a0:	eb12 0801 	adds.w	r8, r2, r1
 80034a4:	4629      	mov	r1, r5
 80034a6:	eb43 0901 	adc.w	r9, r3, r1
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034be:	4690      	mov	r8, r2
 80034c0:	4699      	mov	r9, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	eb18 0303 	adds.w	r3, r8, r3
 80034c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034cc:	462b      	mov	r3, r5
 80034ce:	eb49 0303 	adc.w	r3, r9, r3
 80034d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034ea:	460b      	mov	r3, r1
 80034ec:	18db      	adds	r3, r3, r3
 80034ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f0:	4613      	mov	r3, r2
 80034f2:	eb42 0303 	adc.w	r3, r2, r3
 80034f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80034f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003500:	f7fc fe62 	bl	80001c8 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4b61      	ldr	r3, [pc, #388]	@ (8003690 <UART_SetConfig+0x2d4>)
 800350a:	fba3 2302 	umull	r2, r3, r3, r2
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	011c      	lsls	r4, r3, #4
 8003512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003516:	2200      	movs	r2, #0
 8003518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800351c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003520:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003524:	4642      	mov	r2, r8
 8003526:	464b      	mov	r3, r9
 8003528:	1891      	adds	r1, r2, r2
 800352a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800352c:	415b      	adcs	r3, r3
 800352e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003530:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003534:	4641      	mov	r1, r8
 8003536:	eb12 0a01 	adds.w	sl, r2, r1
 800353a:	4649      	mov	r1, r9
 800353c:	eb43 0b01 	adc.w	fp, r3, r1
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800354c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003554:	4692      	mov	sl, r2
 8003556:	469b      	mov	fp, r3
 8003558:	4643      	mov	r3, r8
 800355a:	eb1a 0303 	adds.w	r3, sl, r3
 800355e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003562:	464b      	mov	r3, r9
 8003564:	eb4b 0303 	adc.w	r3, fp, r3
 8003568:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003578:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800357c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003580:	460b      	mov	r3, r1
 8003582:	18db      	adds	r3, r3, r3
 8003584:	643b      	str	r3, [r7, #64]	@ 0x40
 8003586:	4613      	mov	r3, r2
 8003588:	eb42 0303 	adc.w	r3, r2, r3
 800358c:	647b      	str	r3, [r7, #68]	@ 0x44
 800358e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003596:	f7fc fe17 	bl	80001c8 <__aeabi_uldivmod>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003690 <UART_SetConfig+0x2d4>)
 80035a2:	fba3 2301 	umull	r2, r3, r3, r1
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2264      	movs	r2, #100	@ 0x64
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	1acb      	subs	r3, r1, r3
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035b6:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <UART_SetConfig+0x2d4>)
 80035b8:	fba3 2302 	umull	r2, r3, r3, r2
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035c4:	441c      	add	r4, r3
 80035c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035d8:	4642      	mov	r2, r8
 80035da:	464b      	mov	r3, r9
 80035dc:	1891      	adds	r1, r2, r2
 80035de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035e0:	415b      	adcs	r3, r3
 80035e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035e8:	4641      	mov	r1, r8
 80035ea:	1851      	adds	r1, r2, r1
 80035ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80035ee:	4649      	mov	r1, r9
 80035f0:	414b      	adcs	r3, r1
 80035f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003600:	4659      	mov	r1, fp
 8003602:	00cb      	lsls	r3, r1, #3
 8003604:	4651      	mov	r1, sl
 8003606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360a:	4651      	mov	r1, sl
 800360c:	00ca      	lsls	r2, r1, #3
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	4603      	mov	r3, r0
 8003614:	4642      	mov	r2, r8
 8003616:	189b      	adds	r3, r3, r2
 8003618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800361c:	464b      	mov	r3, r9
 800361e:	460a      	mov	r2, r1
 8003620:	eb42 0303 	adc.w	r3, r2, r3
 8003624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003634:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003638:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800363c:	460b      	mov	r3, r1
 800363e:	18db      	adds	r3, r3, r3
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003642:	4613      	mov	r3, r2
 8003644:	eb42 0303 	adc.w	r3, r2, r3
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800364a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800364e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003652:	f7fc fdb9 	bl	80001c8 <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <UART_SetConfig+0x2d4>)
 800365c:	fba3 1302 	umull	r1, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	2164      	movs	r1, #100	@ 0x64
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	3332      	adds	r3, #50	@ 0x32
 800366e:	4a08      	ldr	r2, [pc, #32]	@ (8003690 <UART_SetConfig+0x2d4>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	f003 0207 	and.w	r2, r3, #7
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4422      	add	r2, r4
 8003682:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003684:	e106      	b.n	8003894 <UART_SetConfig+0x4d8>
 8003686:	bf00      	nop
 8003688:	40011000 	.word	0x40011000
 800368c:	40011400 	.word	0x40011400
 8003690:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003698:	2200      	movs	r2, #0
 800369a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800369e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036a6:	4642      	mov	r2, r8
 80036a8:	464b      	mov	r3, r9
 80036aa:	1891      	adds	r1, r2, r2
 80036ac:	6239      	str	r1, [r7, #32]
 80036ae:	415b      	adcs	r3, r3
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036b6:	4641      	mov	r1, r8
 80036b8:	1854      	adds	r4, r2, r1
 80036ba:	4649      	mov	r1, r9
 80036bc:	eb43 0501 	adc.w	r5, r3, r1
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	00eb      	lsls	r3, r5, #3
 80036ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ce:	00e2      	lsls	r2, r4, #3
 80036d0:	4614      	mov	r4, r2
 80036d2:	461d      	mov	r5, r3
 80036d4:	4643      	mov	r3, r8
 80036d6:	18e3      	adds	r3, r4, r3
 80036d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036dc:	464b      	mov	r3, r9
 80036de:	eb45 0303 	adc.w	r3, r5, r3
 80036e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003702:	4629      	mov	r1, r5
 8003704:	008b      	lsls	r3, r1, #2
 8003706:	4621      	mov	r1, r4
 8003708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800370c:	4621      	mov	r1, r4
 800370e:	008a      	lsls	r2, r1, #2
 8003710:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003714:	f7fc fd58 	bl	80001c8 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4b60      	ldr	r3, [pc, #384]	@ (80038a0 <UART_SetConfig+0x4e4>)
 800371e:	fba3 2302 	umull	r2, r3, r3, r2
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	011c      	lsls	r4, r3, #4
 8003726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800372a:	2200      	movs	r2, #0
 800372c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003730:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003738:	4642      	mov	r2, r8
 800373a:	464b      	mov	r3, r9
 800373c:	1891      	adds	r1, r2, r2
 800373e:	61b9      	str	r1, [r7, #24]
 8003740:	415b      	adcs	r3, r3
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003748:	4641      	mov	r1, r8
 800374a:	1851      	adds	r1, r2, r1
 800374c:	6139      	str	r1, [r7, #16]
 800374e:	4649      	mov	r1, r9
 8003750:	414b      	adcs	r3, r1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003760:	4659      	mov	r1, fp
 8003762:	00cb      	lsls	r3, r1, #3
 8003764:	4651      	mov	r1, sl
 8003766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800376a:	4651      	mov	r1, sl
 800376c:	00ca      	lsls	r2, r1, #3
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	4603      	mov	r3, r0
 8003774:	4642      	mov	r2, r8
 8003776:	189b      	adds	r3, r3, r2
 8003778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800377c:	464b      	mov	r3, r9
 800377e:	460a      	mov	r2, r1
 8003780:	eb42 0303 	adc.w	r3, r2, r3
 8003784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003792:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037a0:	4649      	mov	r1, r9
 80037a2:	008b      	lsls	r3, r1, #2
 80037a4:	4641      	mov	r1, r8
 80037a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037aa:	4641      	mov	r1, r8
 80037ac:	008a      	lsls	r2, r1, #2
 80037ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037b2:	f7fc fd09 	bl	80001c8 <__aeabi_uldivmod>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	4b38      	ldr	r3, [pc, #224]	@ (80038a0 <UART_SetConfig+0x4e4>)
 80037be:	fba3 2301 	umull	r2, r3, r3, r1
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2264      	movs	r2, #100	@ 0x64
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	1acb      	subs	r3, r1, r3
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	3332      	adds	r3, #50	@ 0x32
 80037d0:	4a33      	ldr	r2, [pc, #204]	@ (80038a0 <UART_SetConfig+0x4e4>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037dc:	441c      	add	r4, r3
 80037de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e2:	2200      	movs	r2, #0
 80037e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80037e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80037e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037ec:	4642      	mov	r2, r8
 80037ee:	464b      	mov	r3, r9
 80037f0:	1891      	adds	r1, r2, r2
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	415b      	adcs	r3, r3
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037fc:	4641      	mov	r1, r8
 80037fe:	1851      	adds	r1, r2, r1
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	4649      	mov	r1, r9
 8003804:	414b      	adcs	r3, r1
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003814:	4659      	mov	r1, fp
 8003816:	00cb      	lsls	r3, r1, #3
 8003818:	4651      	mov	r1, sl
 800381a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800381e:	4651      	mov	r1, sl
 8003820:	00ca      	lsls	r2, r1, #3
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	4603      	mov	r3, r0
 8003828:	4642      	mov	r2, r8
 800382a:	189b      	adds	r3, r3, r2
 800382c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800382e:	464b      	mov	r3, r9
 8003830:	460a      	mov	r2, r1
 8003832:	eb42 0303 	adc.w	r3, r2, r3
 8003836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	663b      	str	r3, [r7, #96]	@ 0x60
 8003842:	667a      	str	r2, [r7, #100]	@ 0x64
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003850:	4649      	mov	r1, r9
 8003852:	008b      	lsls	r3, r1, #2
 8003854:	4641      	mov	r1, r8
 8003856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800385a:	4641      	mov	r1, r8
 800385c:	008a      	lsls	r2, r1, #2
 800385e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003862:	f7fc fcb1 	bl	80001c8 <__aeabi_uldivmod>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <UART_SetConfig+0x4e4>)
 800386c:	fba3 1302 	umull	r1, r3, r3, r2
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	2164      	movs	r1, #100	@ 0x64
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	3332      	adds	r3, #50	@ 0x32
 800387e:	4a08      	ldr	r2, [pc, #32]	@ (80038a0 <UART_SetConfig+0x4e4>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	f003 020f 	and.w	r2, r3, #15
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4422      	add	r2, r4
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800389a:	46bd      	mov	sp, r7
 800389c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a0:	51eb851f 	.word	0x51eb851f

080038a4 <memset>:
 80038a4:	4402      	add	r2, r0
 80038a6:	4603      	mov	r3, r0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	f803 1b01 	strb.w	r1, [r3], #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	4d0d      	ldr	r5, [pc, #52]	@ (80038ec <__libc_init_array+0x38>)
 80038b8:	4c0d      	ldr	r4, [pc, #52]	@ (80038f0 <__libc_init_array+0x3c>)
 80038ba:	1b64      	subs	r4, r4, r5
 80038bc:	10a4      	asrs	r4, r4, #2
 80038be:	2600      	movs	r6, #0
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	4d0b      	ldr	r5, [pc, #44]	@ (80038f4 <__libc_init_array+0x40>)
 80038c6:	4c0c      	ldr	r4, [pc, #48]	@ (80038f8 <__libc_init_array+0x44>)
 80038c8:	f000 f818 	bl	80038fc <_init>
 80038cc:	1b64      	subs	r4, r4, r5
 80038ce:	10a4      	asrs	r4, r4, #2
 80038d0:	2600      	movs	r6, #0
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08003934 	.word	0x08003934
 80038f0:	08003934 	.word	0x08003934
 80038f4:	08003934 	.word	0x08003934
 80038f8:	08003938 	.word	0x08003938

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
